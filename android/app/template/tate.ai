%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 18.1.1%%For: (mizo) ()%%Title: (tate.ai)%%CreationDate: 2017/04/11 16:16%%Canvassize: 16383%%BoundingBox: -2 -271 165 55%%HiResBoundingBox: -1.61768 -270.8784 164.5793 54.7627%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 82.4999 -137.7517 82.4999 -137.7517%AI3_TileBox: -197.2954 -517.48 361.7046 265.52%AI3_DocumentPreview: None%AI5_ArtSize: 164.4094 266.4567%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI8_OpenToView: -370.5 93.5 2 1832 936 18 1 0 82 132 0 0%AI5_OpenViewLayers: 73%%PageOrigin:-223.4351 -533.5352%AI7_GridSettings: 56.6929 10 56.6929 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 68 128 8%%BeginData: 5766 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FF1B1BA9AFA9AF85AFA9AFFFAF85AFAF85AFAF61FF8585AFFF85AF%AFFFA98585FF6161FD21FFA91B14AF84AFA93D84AF85FF606185AFA9FF60%8584FF85AF60AFFFAF84AF1485AF6185FD22FF85AFFFFFA9FF858BFD04AF%85FD04AFFFA9FFAFFFFFFFAFFFA9FFFFAFAFFFA9FD22FFA9FD87FFAFFD05%FFCAFFFFFFCAFFFFFFCAFD19FFCBFD1DFFCB9BCAFFCACACBC3CACACBCACA%9BFFFFCACAFFCAFFFFFFC4C4C4FFCACBCACBCACBC4CBCACACACBFD1BFFA8%FFCAC4A2FFA2CBA2C4A2CBA1CBFFC4A8CAA2FFA8CACAFFA8CA9BCAA8CAA2%CBA1CAA2C49BC49BC4A8FD1EFFCACBCBFFCAFFCBFD05FFCBFD09FFCAFD05%FFCBFFFFFFCBFFCBFFCAFD1CFFA9FFCAFD85FFA9FFA8FFFFFFA8FFA8FFA8%FFA8FFA8FFA8AEA8FFA8FFA8FFAEFFA8FFA8FFFFFFA8AEA8FFFFFFA8FFA8%FFA8AEA8FFA8FFFFFFA8FFA8FF83AEAEFD10FF5883835F83FF5FA8A8AE83%AE1284A85FAEAE5FAE835F838383FF848383AE83FF5FFF8483833B1183FF%AEFFAE83AE5F835F3B34AE83FD0AFFAFFFCAFFAF5F5F8483A8A883AEA858%83833458A83484835FA88459AF835FA883A8A85883FD04A8838312125F83%58FFA8838384835F343AA8FF83FD0EFFAEAEFD04FFAEFFFFFFAEFFA8AEFF%FFAEFFAEFD05FFAEFFA8FFFFFFAEFFAEFD05FFA8FFAEFD07FFA8FFA8FD0C%FFA8FFCAFFA8FD83FFA9FFCBFFA8FD3FFF61A8C4FF83A8FD3EFF84FFA2FF%83FDFCFFFD0FFFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9%FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8%FFA9FFA8FFA9FFA8FFA9FFA8FFA9FD04FFCBFFFFFFCBFFFFFFCBFFFFFFCB%FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFAFA9FFCAFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD48FFCBFFAFA9%FFA8FFA8AEA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFFFFFA8FD42FFCBFFAFAFFFCAFFAEFD39FFA8FFFFFFA9FD40FFAEFF%FFFFAFA8FFCAFFA8FD39FFAEFFFFFFA9FD40FFAEFFFFFFAFA9FFCAFFA8FD%39FFAEFD46FFCBFFAFA9FFA8FFA8FD39FFA8FFFFFFA8FD42FFCBFFAFAFFF%CAFFAEFD39FFA8FFFFFFA9FD40FFAEFFFFFFAFA8FFCAFFA8FD39FFAEFFFF%FFA9FD40FFAEFFFFFFAFA9FFCAFFA8FD39FFAEFD46FFCBFFAFA9FFA8FFA8%FD39FFA8FFFFFFA8FD42FFCBFFAFAFFFCAFFAEFD39FFA8FFFFFFA9FD40FF%AEFFFFFFAFA8FFCAFFA8FD39FFAEFFFFFFA9FD40FFAEFFFFFFAFA9FFCAFF%A8FD39FFAEFD46FFCBFFAFA9FFA8FFA8FD39FFA8FFFFFFA8FD42FFCBFFAF%AFFFCAFFAEFD39FFA8FFFFFFA9FD40FFAEFFFFFFAFA8FFCAFFA8FD39FFAE%FFFFFFA9FD40FFAEFFFFFFAFA9FFCAFFA8FD39FFAEFD46FFCBFFAFA9FFA8%FFA8FD39FFA8FFFFFFA8FD42FFCBFFAFAFFFCAFFAEFD39FFA8FFFFFFA9FD%40FFAEFFFFFFAFA8FFCAFFA8FD39FFAEFFFFFFA9FD40FFAEFFFFFFAFA9FF%CAFFA8FD39FFAEFD46FFCBFFAFA9FFA8FFA8FD39FFA8FFFFFFA8FD42FFCB%FFAFAFFFCAFFAEFD39FFA8FFFFFFA9FD40FFAEFFFFFFAFA8FFCAFFA8FD39%FFAEFFFFFFA9FD40FFAEFFFFFFAFA9FFCAFFA8FD39FFAEFD46FFCBFFAFA9%FFA8FFA8FD39FFA8FFFFFFA8FD42FFCBFFAFAFFFCAFFAEFD39FFA8FFFFFF%A9FD40FFAEFFFFFFAFA8FFCAFFA8FD39FFAEFFFFFFA9FD40FFAEFFFFFFAF%A9FFCAFFA8FD39FFAEFD46FFCBFFAFA9FFA8FFA8FD39FFA8FFFFFFA8FD42%FFCBFFAFAFFFCAFFAEFD39FFA8FFFFFFA9FD40FFAEFFFFFFAFA8FFCAFFA8%FD39FFAEFFFFFFA9FD40FFAEFFFFFFAFA9FFCAFFA8FD39FFAEFD46FFCBFF%AFA9FFA8FFA8FD39FFA8FFFFFFA8FD42FFCBFFAFAFFFCAFFAEFD39FFA8FF%FFFFA9FD40FFAEFFFFFFAFA8FFCAFFA8FD39FFAEFFFFFFA9FD40FFAEFFFF%FFAFA9FFCAFFA8FD39FFAEFD46FFCBFFAFA9FFA8FFA8FD39FFA8FFFFFFA8%FD42FFCBFFAFAFFFCAFFAEFD39FFA8FFFFFFA9FD40FFAEFFFFFFAFA8FFCA%FFA8FD39FFAEFFFFFFA9FD40FFAEFFFFFFAFA9FFCAFFA8FD39FFAEFD46FF%CBFFAFA9FFA8FFA8FD39FFA8FFFFFFA8FD42FFCBFFAFAFFFCAFFAEFD39FF%A8FFFFFFA9FD40FFAEFFFFFFAFA8FFCAFFA8FD39FFAEFFFFFFA9FD40FFAE%FFFFFFAFA9FFCAFFA8FD39FFAEFD46FFCBFFAFA9FFA8FFA8FD39FFA8FFFF%FFA8FD42FFCBFFAFAFFFCAFFAEFD39FFA8FFFFFFA9FD40FFAEFFFFFFAFA8%FFCAFFA8FD39FFAEFFFFFFA9FD40FFAEFFFFFFAFA9FFCAFFA8FD39FFAEFD%46FFCBFFAFA9FFA8FFA8FFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAE%FFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8FFAEFFA8%FFAEFFA8FFAEFFA8FFFFFFA8FD06FFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFF%FFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAEFFFFFFAE%FFFFFFAEFFFFFFAEFFFFFFAEFFFFFFCBFFAFAFFFCAFFFFFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFA9FD04FFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFAFA8AFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9%FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8%FFA9FFA8FFA9FFA8FFA9AF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe \203J\203\212\203O\203\211\203t\203B\203u\203\211\203V\203v\203\211\203O\203C\203\223) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Vectorized Object) (\203g\203\214\201[\203X\211\346\221\234) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Line Plugin Group) (Line artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Sketch Plugin Group) (Sketch artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe \203u\203\214\203\223\203h\203v\203\211\203O\203C\203\223) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe \203V\203\223\203{\203\213) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe \203G\203\223\203x\203\215\201[\203v\203v\203\211\203O\203C\203\223) (Deform.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe \203\211\203C\203u\203y\203C\203\223\203g\203v\203\211\203O\203C\203\223) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613)(\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613) 0 7 Bd[0.1<B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180>0.801 %_Br<403F3E3D3D3C3B3A3A393837373635343433323130302F2E2D2D2C2B2A2A292827272625242323222120201F1E1D1D1C1B1A1A><D9D8D7D6D6D5D4D3D3D2D1D0D0CFCECDCDCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C0C0BFBEBDBCBCBBBAB9B9B8B7B6B6B5B4B3B3><999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC><19191818171716161515141413131212111110100F0F0E0E0D0D0C0C0B0B0A0A09090808070706060505040403030202010100>1 %_Br<191A1A1B1B1C1C1D1D1D1E1E1F1F2020202121222223232324242525262626272728282929292A2A2B2B2C2C2C2D2D2E2E2F2F2F30303131323232333334343535353636373738383839393A3A3B3B3B3C3C3D3D3E3E3E3F3F40><808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9><CCCBCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B7B7B6B6B5B5B4B3B3B2B2B1B0B0AFAFAEAEADACACABABAAAAA9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A0A09F9F9E9E9D9C9C9B9B9A9A99><000001010101020202030303030404040505050506060607070707080808090909090A0A0A0B0B0B0B0C0C0C0D0D0D0D0E0E0E0F0F0F0F101010111111111212121313131314141415151515161616171717171818181919191A>1 %_Br<807F7E7E7D7D7C7B7B7A7A79797877777676757574737372727171706F6F6E6E6D6D6C6B6B6A6A69696867676666656564636362626161605F5F5E5E5D5D5C5B5B5A5A59595857575656555554535352525151504F4F4E4E4D4C4C4B4B4A4A49484847474646454444434342424140403F3F3E3E3D3C3C3B3B3A3A39383837373636353434333332323130302F2F2E2E2D2C2C2B2B2A2A29282827272626252424232322222120201F1F1E1E1D1C1C1B1B1A19><E6E5E4E4E3E3E2E1E1E0E0DFDFDEDDDDDCDCDBDBDAD9D9D8D8D7D7D6D5D5D4D4D3D3D2D1D1D0D0CFCFCECDCDCCCCCBCBCAC9C9C8C8C7C7C6C5C5C4C4C3C3C2C1C1C0C0BFBFBEBDBDBCBCBBBBBAB9B9B8B8B7B7B6B5B5B4B4B3B2B2B1B1B0B0AFAEAEADADACACABAAAAA9A9A8A8A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9E9E9D9D9C9C9B9A9A9999989897969695959494939292919190908F8E8E8D8D8C8C8B8A8A89898888878686858584848382828181807F><191B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC>01 %_Br<191A1B1B1C1C1D1E1E1F1F20202122222323242425262627272828292A2A2B2B2C2C2D2E2E2F2F30303132323333343435363637373838393A3A3B3B3C3C3D3E3E3F3F40404142424343444445464647474848494A4A4B4B4C4D4D4E4E4F4F50515152525353545555565657575859595A5A5B5B5C5D5D5E5E5F5F60616162626363646565666667676869696A6A6B6B6C6D6D6E6E6F6F70717172727373747575767677777879797A7A7B7B7C7D7D7E7E7F80><8080818182828384848585868687888889898A8A8B8C8C8D8D8E8E8F9090919192929394949595969697989899999A9A9B9C9C9D9D9E9E9FA0A0A1A1A2A2A3A4A4A5A5A6A6A7A8A8A9A9AAAAABACACADADAEAEAFB0B0B1B1B2B3B3B4B4B5B5B6B7B7B8B8B9B9BABBBBBCBCBDBDBEBFBFC0C0C1C1C2C3C3C4C4C5C5C6C7C7C8C8C9C9CACBCBCCCCCDCDCECFCFD0D0D1D1D2D3D3D4D4D5D5D6D7D7D8D8D9D9DADBDBDCDCDDDDDEDFDFE0E0E1E1E2E3E3E4E4E5E6><CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B19>01 %_Br0.1<B3B1B1B0AFAEADACABAAA9A8A7A6A5A5A4A3A2A1A0A09F9E9D9D9C9B9A9A999898979696959494939292919190908F8F8E8E8D8D8C8C8B8B8A8A8989888888878787868686858585848484838383838382828282818181818181818080808080808080808080808080808080>0.801 %_Br[0.1 0.5 0.8 0 1 50 100 %_BS%_0.1 0.5 0.8 0 1 50 100 Bs0.1 0.7 0.8 0 1 50 90 %_BS%_0.1 0.7 0.8 0 1 50 90 Bs0.25 0.85 0.6 0.1 1 50 79 %_BS%_0.25 0.85 0.6 0.1 1 50 79 Bs0.1 0.5 0.8 0 1 50 64 %_BS%_0.1 0.5 0.8 0 1 50 64 Bs0.5 0.9 0.1 0 1 50 47 %_BS%_0.5 0.9 0.1 0 1 50 47 Bs0.1 0.5 0.8 0 1 50 30 %_BS%_0.1 0.5 0.8 0 1 50 30 Bs0.1 0.7 0.8 0 1 28 0 %_BS%_0.1 0.7 0.8 0 1 28 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\))(\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\)) 1 2 Bd[<000001010101020202030303030404040505050506060607070707080808090909090A0A0A0A0B0B0B0B0C0C0C0D0D0D0D0E0E0E0E0F0F0F0F1010101011111111121212121313131314141414151515151616161616171717171818181819191919191A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F2020202020212121212122222222222323232323242424242424252525252526262626262627272727272828282828282929292929292A2A2A2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2E2E2E2E2E2E2E2F2F2F2F2F2F2F3030303030303031313131313131323232323232323233333333333333333434343434343434353535353535353535363636363636363636373737373737373737383838383838383838383839393939393939393939393A3A3A3A3A3A3A3A3A3A3A3A3B3B3B3B3B3B3B3B3B3B3B3B3B3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4040404040404040404040404040404040404040404040404040404040404040FF><000102030405060708090A0B0C0D0E0F10111213141515161718191A1B1C1D1E1F20212223232425262728292A2B2C2C2D2E2F30313233333435363738393A3A3B3C3D3E3F3F4041424344444546474848494A4B4C4C4D4E4F505051525354545556575758595A5A5B5C5D5D5E5F60606162636364656666676868696A6A6B6C6D6D6E6F6F7071717273737475757677777879797A7B7B7C7D7D7E7F7F808081828283848485858687878888898A8A8B8B8C8C8D8E8E8F8F9090919292939394949595969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9AAAAABABACACACADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B8B9B9BABABABBBBBBBCBCBCBDBDBDBEBEBEBFBFBFC0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C5C6C6C6C7C7C7C7C8C8C8C8C9C9C9C9CACACACACBCBCBCBCCCCCCCCCCCDCDCDCDCECECECECECFCFCFCFCFD0D0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D2D2D3D3D3D3D3D3D4D4D4D4D4D4D4D4D5D5D5D5D5D5D5D5D6D6D6D6D6D6D6D6D6D6D7D7D7D7D7D7D7D7D7D7D7D7D7D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9FF><00010102030404050606070808090A0A0B0C0C0D0E0E0F1010111212131414151616171818191A1A1B1C1C1D1D1E1F1F202121222223242425262627272829292A2A2B2C2C2D2D2E2F2F3030313132333334343535363737383839393A3A3B3C3C3D3D3E3E3F3F404041414243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F505051515152525353545455555656575758585859595A5A5B5B5C5C5C5D5D5E5E5F5F5F606061616162626363646464656566666667676868686969696A6A6B6B6B6C6C6C6D6D6E6E6E6F6F6F7070707171727272737373747474757575767676777777777878787979797A7A7A7B7B7B7C7C7C7C7D7D7D7E7E7E7E7F7F7F80808080818181818282828283838383848484848585858586868686878787878888888888898989898A8A8A8A8A8B8B8B8B8B8C8C8C8C8C8D8D8D8D8D8D8E8E8E8E8E8F8F8F8F8F8F9090909090909091919191919192929292929292939393939393939394949494949494949495959595959595959596969696969696969696969697979797979797979797979797979898989898989898989898989898989898989898999999999999999999999999999999999999999999999999999999999999FF><000000000001010101010101010202020202020202020303030303030303030404040404040404040405050505050505050506060606060606060606070707070707070707070808080808080808080809090909090909090909090A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101010101111111111111111111111111111111212121212121212121212121212121213131313131313131313131313131313131314141414141414141414141414141414141414151515151515151515151515151515151515151515161616161616161616161616161616161616161616161616171717171717171717171717171717171717171717171717171717171718181818181818181818181818181818181818181818181818181818181818181818181818181919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919FF>1 %_Br[0 0 0 0 1 28 48.538 %_BS%_0 0 0 0 1 28 48.538 Bs0.25 0.85 0.6 0.1 1 50 100 %_BS%_0.25 0.85 0.6 0.1 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)(\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 1 3 Bd[0.20.20.211 %_Br0.20.20.211 %_Br[0.2 0.2 0.2 1 1 68.3944 73.8792 %_BS%_0.2 0.2 0.2 1 1 68.3944 73.8792 Bs0.2 0.2 0.2 1 1 31.8603 88.7329 %_BS%_0.2 0.2 0.2 1 1 31.8603 88.7329 Bs0.2 0.2 0.2 1 1 50 100 %_BS%_0.2 0.2 0.2 1 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1)(\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1) 0 2 Bd[00 %_Br[0 0 0 1 1 50 100 %_BS%_0 0 0 1 1 50 100 Bs0 0 0 1 1 25 0 %_BS%_0 0 0 1 1 25 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h)(\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h) 0 0 54.7383 54.7393 [%AI3_Tile(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 0 m5.8643 0.9766 L2.9316 0.9766 L2.9316 0 L5.8643 0 Lf0 5.8652 m0.9766 5.8652 L0.9766 2.9316 L0 2.9316 L0 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 0.9766 m2.9316 2.9316 L0.9766 2.9316 L0.9766 0.9766 L2.9316 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 2.9316 m5.8643 5.8652 L2.9316 5.8652 L2.9316 2.9316 L5.8643 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0.9766 0 m0.9766 0.9766 L0 0.9766 L0 0 L0.9766 0 Lf27.3682 0 m27.3682 0.9766 L20.5254 0.9766 L20.5254 0 L27.3682 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 2.9316 m27.3682 5.8652 L20.5254 5.8652 L20.5254 2.9316 L27.3682 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 9.7734 m27.3682 14.6611 L20.5254 14.6611 L20.5254 9.7734 L27.3682 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 5.8652 m20.5254 9.7734 L14.6602 9.7734 L14.6602 5.8652 L20.5254 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 0.9766 m9.7734 2.9316 L5.8643 2.9316 L5.8643 0.9766 L9.7734 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 2.9316 m14.6602 5.8652 L9.7734 5.8652 L9.7734 2.9316 L14.6602 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 0 m14.6602 0.9766 L9.7734 0.9766 L9.7734 0 L14.6602 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 0.9766 m20.5254 2.9316 L14.6602 2.9316 L14.6602 0.9766 L20.5254 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 27.3691 m0.9766 27.3691 L0.9766 20.5264 L0 20.5264 L0 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 27.3691 m5.8643 27.3691 L5.8643 20.5264 L2.9316 20.5264 L2.9316 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 27.3691 m14.6602 27.3691 L14.6602 20.5264 L9.7734 20.5264 L9.7734 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 20.5264 m9.7734 20.5264 L9.7734 14.6611 L5.8643 14.6611 L5.8643 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0.9766 9.7734 m2.9316 9.7734 L2.9316 5.8652 L0.9766 5.8652 L0.9766 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 14.6611 m5.8643 14.6611 L5.8643 9.7734 L2.9316 9.7734 L2.9316 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 14.6611 m0.9766 14.6611 L0.9766 9.7734 L0 9.7734 L0 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0.9766 20.5264 m2.9316 20.5264 L2.9316 14.6611 L0.9766 14.6611 L0.9766 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 14.6611 m20.5254 20.5264 L14.6602 20.5264 L14.6602 14.6611 L20.5254 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 5.8652 m9.7734 9.7734 L5.8643 9.7734 L5.8643 5.8652 L9.7734 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 9.7734 m14.6602 14.6611 L9.7734 14.6611 L9.7734 9.7734 L14.6602 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1252 0.13 0 0.0576 k 0.1252 0.13 0 0.0576 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 20.5264 m27.3682 27.3691 L20.5254 27.3691 L20.5254 20.5264 L27.3682 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 54.7393 m48.873 53.7627 L51.8066 53.7627 L51.8066 54.7393 L48.873 54.7393 Lf54.7383 48.874 m53.7617 48.874 L53.7617 51.8076 L54.7383 51.8076 L54.7383 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 53.7627 m51.8066 51.8076 L53.7617 51.8076 L53.7617 53.7627 L51.8066 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 51.8076 m48.873 48.874 L51.8066 48.874 L51.8066 51.8076 L48.873 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR53.7617 54.7393 m53.7617 53.7627 L54.7383 53.7627 L54.7383 54.7393 L53.7617 54.7393 Lf27.3682 54.7393 m27.3682 53.7627 L34.2109 53.7627 L34.2109 54.7393 L27.3682 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 51.8076 m27.3682 48.874 L34.2109 48.874 L34.2109 51.8076 L27.3682 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 44.9639 m27.3682 40.0762 L34.2109 40.0762 L34.2109 44.9639 L27.3682 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 48.874 m34.2109 44.9639 L40.0752 44.9639 L40.0752 48.874 L34.2109 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 53.7627 m44.9639 51.8076 L48.873 51.8076 L48.873 53.7627 L44.9639 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 51.8076 m40.0752 48.874 L44.9639 48.874 L44.9639 51.8076 L40.0752 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 54.7393 m40.0752 53.7627 L44.9639 53.7627 L44.9639 54.7393 L40.0752 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 53.7627 m34.2109 51.8076 L40.0752 51.8076 L40.0752 53.7627 L34.2109 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 27.3691 m53.7617 27.3691 L53.7617 34.2109 L54.7383 34.2109 L54.7383 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 27.3691 m48.873 27.3691 L48.873 34.2109 L51.8066 34.2109 L51.8066 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 27.3691 m40.0752 27.3691 L40.0752 34.2109 L44.9639 34.2109 L44.9639 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 34.2109 m44.9639 34.2109 L44.9639 40.0762 L48.873 40.0762 L48.873 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR53.7617 44.9639 m51.8066 44.9639 L51.8066 48.874 L53.7617 48.874 L53.7617 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 40.0762 m48.873 40.0762 L48.873 44.9639 L51.8066 44.9639 L51.8066 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 40.0762 m53.7617 40.0762 L53.7617 44.9639 L54.7383 44.9639 L54.7383 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR53.7617 34.2109 m51.8066 34.2109 L51.8066 40.0762 L53.7617 40.0762 L53.7617 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 40.0762 m34.2109 34.2109 L40.0752 34.2109 L40.0752 40.0762 L34.2109 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 48.874 m44.9639 44.9639 L48.873 44.9639 L48.873 48.874 L44.9639 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 44.9639 m40.0752 40.0762 L44.9639 40.0762 L44.9639 44.9639 L40.0752 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1252 0.13 0 0.0576 k 0.1252 0.13 0 0.0576 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 34.2109 m27.3682 27.3691 L34.2109 27.3691 L34.2109 34.2109 L27.3682 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 54.7393 m2.9316 53.7627 L0.9766 53.7627 L0.9766 54.7393 L2.9316 54.7393 Lf0 51.8076 m0 53.7627 L0.9766 53.7627 L0.9766 51.8076 L0 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 48.874 m2.9316 51.8076 L0.9766 51.8076 L0.9766 48.874 L2.9316 48.874 Lf5.8643 53.7627 m5.8643 51.8076 L2.9316 51.8076 L2.9316 53.7627 L5.8643 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 54.7393 m9.7734 53.7627 L5.8643 53.7627 L5.8643 54.7393 L9.7734 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 51.8076 m14.6602 53.7627 L9.7734 53.7627 L9.7734 51.8076 L14.6602 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 48.874 m20.5254 51.8076 L14.6602 51.8076 L14.6602 48.874 L20.5254 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 44.9639 m27.3682 48.874 L20.5254 48.874 L20.5254 44.9639 L27.3682 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 53.7627 m27.3682 51.8076 L20.5254 51.8076 L20.5254 53.7627 L27.3682 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 54.7393 m14.6602 53.7627 L20.5254 53.7627 L20.5254 54.7393 L14.6602 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 48.874 m9.7734 51.8076 L5.8643 51.8076 L5.8643 48.874 L9.7734 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 44.9639 m14.6602 48.874 L9.7734 48.874 L9.7734 44.9639 L14.6602 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 40.0762 m20.5254 44.9639 L14.6602 44.9639 L14.6602 40.0762 L20.5254 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 34.2109 m27.3682 40.0762 L20.5254 40.0762 L20.5254 34.2109 L27.3682 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 44.9639 m0 48.874 L0.9766 48.874 L0.9766 44.9639 L0 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 44.9639 m5.8643 48.874 L2.9316 48.874 L2.9316 44.9639 L5.8643 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 40.0762 m9.7734 44.9639 L5.8643 44.9639 L5.8643 40.0762 L9.7734 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 44.9639 m2.9316 40.0762 L0.9766 40.0762 L0.9766 44.9639 L2.9316 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 34.2109 m0 40.0762 L0.9766 40.0762 L0.9766 34.2109 L0 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 27.3691 m2.9316 34.2109 L0.9766 34.2109 L0.9766 27.3691 L2.9316 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 40.0762 m5.8643 34.2109 L2.9316 34.2109 L2.9316 40.0762 L5.8643 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 27.3691 m9.7734 34.2109 L5.8643 34.2109 L5.8643 27.3691 L9.7734 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 40.0762 m14.6602 34.2109 L9.7734 34.2109 L9.7734 40.0762 L14.6602 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 27.3691 m20.5254 34.2109 L14.6602 34.2109 L14.6602 27.3691 L20.5254 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 0 m51.8066 0.9766 L53.7617 0.9766 L53.7617 0 L51.8066 0 Lf54.7383 2.9316 m54.7383 0.9766 L53.7617 0.9766 L53.7617 2.9316 L54.7383 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 5.8652 m51.8066 2.9316 L53.7617 2.9316 L53.7617 5.8652 L51.8066 5.8652 Lf48.873 0.9766 m48.873 2.9316 L51.8066 2.9316 L51.8066 0.9766 L48.873 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 0 m44.9639 0.9766 L48.873 0.9766 L48.873 0 L44.9639 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 2.9316 m40.0752 0.9766 L44.9639 0.9766 L44.9639 2.9316 L40.0752 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 5.8652 m34.2109 2.9316 L40.0752 2.9316 L40.0752 5.8652 L34.2109 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 9.7734 m27.3682 5.8652 L34.2109 5.8652 L34.2109 9.7734 L27.3682 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 0.9766 m27.3682 2.9316 L34.2109 2.9316 L34.2109 0.9766 L27.3682 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 0 m40.0752 0.9766 L34.2109 0.9766 L34.2109 0 L40.0752 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 5.8652 m44.9639 2.9316 L48.873 2.9316 L48.873 5.8652 L44.9639 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 9.7734 m40.0752 5.8652 L44.9639 5.8652 L44.9639 9.7734 L40.0752 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 14.6611 m34.2109 9.7734 L40.0752 9.7734 L40.0752 14.6611 L34.2109 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 20.5264 m27.3682 14.6611 L34.2109 14.6611 L34.2109 20.5264 L27.3682 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 9.7734 m54.7383 5.8652 L53.7617 5.8652 L53.7617 9.7734 L54.7383 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 9.7734 m48.873 5.8652 L51.8066 5.8652 L51.8066 9.7734 L48.873 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 14.6611 m44.9639 9.7734 L48.873 9.7734 L48.873 14.6611 L44.9639 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 9.7734 m51.8066 14.6611 L53.7617 14.6611 L53.7617 9.7734 L51.8066 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 20.5264 m54.7383 14.6611 L53.7617 14.6611 L53.7617 20.5264 L54.7383 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 27.3691 m51.8066 20.5264 L53.7617 20.5264 L53.7617 27.3691 L51.8066 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 14.6611 m48.873 20.5264 L51.8066 20.5264 L51.8066 14.6611 L48.873 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 27.3691 m44.9639 20.5264 L48.873 20.5264 L48.873 27.3691 L44.9639 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 14.6611 m40.0752 20.5264 L44.9639 20.5264 L44.9639 14.6611 L40.0752 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 27.3691 m34.2109 20.5264 L40.0752 20.5264 L40.0752 27.3691 L34.2109 27.3691 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 40)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8105.8872 8052.0615 m-7714.1265 8052.0615 L-7714.1265 7960.3726 L-8105.8872 7960.3726 L-8105.8872 8052.0615 Ln0 O0 0 0 1 k1 XR-7718.7886 7994.3838 m-7720.5469 7994.3838 -7840.2168 7996.5566 -7916.0869 7997.9365 C-7936.9019 7996.9995 -7957.6885 7995.687 -7978.4897 7993.9663 C-7980.9678 7993.6157 -7983.7822 7993.2598 -7985.2935 7993.0654 c-7986.1465 7992.9502 -7987.0083 7992.8501 -7987.8726 7992.7573 C-7987.4185 7992.5254 -7986.9751 7992.2646 -7986.5518 7991.959 C-7985.6851 7991.1973 -7984.8306 7990.2974 -7984.3086 7988.9189 C-7984.3335 7988.6333 -7984.1348 7988.2837 -7984.0879 7987.9941 c-7983.9883 7987.3765 -7984.0732 7986.6274 -7984.1675 7986.0918 c-7984.2295 7985.7373 -7984.3901 7985.4902 -7984.4609 7985.1958 c-7984.4839 7985.0991 -7984.4136 7985.0405 -7984.4409 7984.9663 c-7984.5747 7984.6133 -7984.9663 7984.0166 -7985.1895 7983.6909 c-7985.2935 7983.5405 -7985.4229 7983.4414 -7985.5386 7983.2837 c-7985.5547 7983.2607 -7985.5024 7983.1997 -7985.5278 7983.1709 c-7986.0835 7982.5308 -7986.8662 7982.0054 -7987.8306 7981.5405 c-7987.8896 7981.5151 -7987.8989 7981.6094 -7987.9717 7981.5518 C-7988.2568 7981.4302 -7988.5493 7981.3174 -7988.8296 7981.2559 c-7990.3315 7980.9277 -7992.1519 7981.3125 -7993.2378 7982.0981 c-7994.2349 7982.8198 -7994.9658 7984.3262 -7994.9028 7985.5381 c-7994.8477 7986.5742 -7994.1016 7987.7222 -7992.8809 7988.4995 c-7991.7954 7989.1934 -7990.4829 7989.4478 -7989.6729 7988.8237 C-7990.0854 7988.6934 -7990.4038 7988.498 -7990.5161 7988.2173 C-7990.5259 7987.9414 -7990.5317 7987.6636 -7990.3105 7987.3237 C-7989.8867 7986.9502 -7989.2275 7986.7134 -7988.5586 7987.1797 c-7987.6196 7987.835 -7987.5078 7989.2534 -7988.4692 7990.0005 C-7988.7437 7990.1055 -7988.9937 7990.3438 -7989.1851 7990.4478 c-7989.6177 7990.6831 -7989.9937 7990.8501 -7990.4102 7991.0078 c-7991.5288 7991.4238 -7992.9189 7991.8828 -7993.9678 7992.0615 c-7994.1465 7992.0933 -7994.3345 7992.1118 -7994.5156 7992.1382 C-7997.8389 7991.8438 -8000.9751 7991.5342 -8003.5767 7990.9902 C-8003.5488 7990.9878 -8003.5259 7990.9893 -8003.4937 7990.9854 c-8002.6729 7990.8838 -8002.0659 7990.7173 -8001.3398 7990.4766 c-8001.0679 7990.3877 -8000.7539 7990.3765 -8000.5176 7990.2798 c-8000.4336 7990.25 -8000.3765 7990.1245 -8000.2822 7990.0781 c-7999.9722 7989.9253 -7999.6479 7989.8301 -7999.3354 7989.6245 c-7998.3447 7988.9702 -7997.3125 7987.7998 -7997.1968 7986.3325 C-7997.3818 7985.291 -7997.7993 7984.3174 -7999.0288 7983.543 c-7999.1567 7983.4595 -7999.3013 7983.4238 -7999.4346 7983.3477 C-8001.2866 7982.6821 -8003.0269 7983.7773 -8003.2417 7985.6709 C-8003.1475 7985.8398 -8003.0854 7986.0181 -8003.0967 7986.2173 C-8002.7295 7986.9141 -8001.3389 7987.5205 -8000.7407 7987.0781 C-8001.0483 7987.0215 -8001.1846 7986.9902 -8001.2988 7986.7285 C-8001.3242 7986.0718 -8000.5029 7985.8975 -8000.0879 7986.4814 C-7999.9316 7987.167 -8000.2026 7987.7173 -8000.7295 7988.2749 c-8000.9419 7988.4995 -8001.2188 7988.6333 -8001.4917 7988.8188 c-8001.8555 7989.0654 -8002.1846 7989.3477 -8002.5469 7989.498 c-8002.8735 7989.6333 -8003.2466 7989.666 -8003.5796 7989.7534 c-8003.6699 7989.7749 -8003.7319 7989.8262 -8003.8057 7989.8438 c-8004.0625 7989.8975 -8004.2715 7989.979 -8004.5229 7990.0117 c-8004.8564 7990.0493 -8005.2095 7990.0127 -8005.5879 7990.0493 c-8005.7749 7990.0693 -8005.9546 7990.1582 -8006.1499 7990.1758 c-8006.2769 7990.1846 -8006.4072 7990.1846 -8006.5376 7990.187 C-8009.2485 7989.2861 -8011.5308 7988.0742 -8013.4165 7985.7422 c-8017.1055 7981.187 -8011.4766 7977.0215 -8010.4253 7981.0615 C-8012.4019 7982.4995 -8016.0225 7985.5845 -8008.3242 7985.7109 C-8000.0396 7984.2197 -8007.1333 7968.9565 -8017.0859 7973.022 c-8025.4502 7976.439 -8021.5679 7985.103 -8015.9009 7988.7573 c-8007.4253 7994.2197 -7997.9727 7994.9565 -7988.1362 7995.0493 C-7998.8213 7999.5132 -8013.3599 7996.8677 -8021.4248 7988.8447 c-8025.5361 7984.7573 -8029.4785 7978.4556 -8028.2549 7972.354 c-8027.0093 7966.146 -8020.5967 7971.8877 -8025.5308 7971.9063 C-8025.3247 7977.4702 -8012.0737 7971.4287 -8018.3657 7963.2915 c-8024.0361 7955.9565 -8034.0049 7963.9868 -8035.7593 7970.4126 c-8041.4595 7991.2998 -8011.7896 7997.1758 -7997.8169 7997.8877 C-8009.5493 8001.2397 -8025.8242 7998.7373 -8036.9897 7994.25 c-8041.4019 7992.4741 -8046.4058 7989.3574 -8048.9829 7985.2422 c-8052.8975 7978.9902 -8045.8618 7974.7485 -8045.3306 7976.8677 c-8044.9048 7978.5605 -8050.8115 7979.0879 -8046.2617 7982.1631 c-8042.2441 7984.8828 -8038.7109 7978.6733 -8037.8975 7975.543 c-8034.1133 7960.9966 -8055.4951 7962.9253 -8057.8018 7976.6621 c-8062.9453 8007.2915 -8016.7422 8000.9214 -8000.9253 8000.0581 C-8001.1475 8000.2261 -8001.3682 8000.3838 -8001.5898 8000.5469 C-8006.8696 8002.0493 -8012.0767 8004.251 -8016.8955 8007.0117 C-8031.3896 8008.7461 -8044.1846 7998.355 -8060.0269 7993.0796 c-8068.9985 7990.0933 -8079.5283 7994.3926 -8087.7129 7989.7788 c-8092.0586 7987.3184 -8095.1333 7984.73 -8096.7314 7979.5166 C-8098.3442 7970.5742 -8088.7329 7969.4365 -8090.5747 7974.106 C-8092.2778 7974.4341 -8091.6123 7973.2988 -8092.7705 7973.3062 C-8096.7212 7977.0117 -8088.4595 7982.1958 -8084.5957 7978.8965 c-8077.8848 7973.1675 -8082.6919 7964.7974 -8089.5215 7962.5205 C-8108.0054 7962.7148 -8108.4351 7985.3262 -8102.4829 7997.8237 c-8086.6567 8031.0493 -8052.5796 8019.0469 -8024.9727 8012.0117 C-8028.7168 8014.5381 -8031.3325 8018.1069 -8034.0098 8021.6797 c-8038.6548 8027.8813 -8041.1045 8037.3184 -8032.4375 8041.3262 C-8031.5967 8045.4478 -8030.0742 8049.3501 -8026.0024 8051.2334 c-8021.1821 8053.4639 -8016.2808 8051.0229 -8014.9858 8045.9155 C-8014.9116 8043.1357 -8015.6318 8041.291 -8018.0288 8039.8535 c-8019.6089 8038.9053 -8024.9526 8038.9951 -8022.2925 8041.999 C-8020.4019 8040.5054 -8020.5679 8042.9502 -8021.4463 8044.0654 C-8024.3179 8044.0342 -8025.0122 8041.9502 -8024.9507 8038.9829 c-8024.9502 8038.96 -8024.9492 8038.9341 -8024.9497 8038.9077 C-8024.7925 8031.6021 -8023.5693 8025.7886 -8021.5068 8021.1934 C-8021.5068 8021.1948 -8021.5059 8021.1958 -8021.5049 8021.1973 c-8021.2593 8021.6797 -8020.9175 8021.9644 -8020.6836 8022.3589 c-8020.6079 8022.4863 -8020.6846 8022.603 -8020.6108 8022.6982 c-8020.2612 8023.1494 -8019.4321 8023.835 -8018.9663 8024.2046 c-8018.7485 8024.3765 -8018.5186 8024.4629 -8018.2827 8024.6367 c-8018.2476 8024.6621 -8018.2969 8024.7749 -8018.2466 8024.8062 c-8017.1606 8025.4814 -8015.7988 8025.8926 -8014.2012 8026.1357 C-8014.1055 8026.146 -8014.1328 8026.0078 -8014.0024 8026.0581 C-8013.5386 8026.1055 -8013.0659 8026.1382 -8012.6333 8026.103 c-8010.3213 8025.9102 -8007.8667 8024.5493 -8006.6479 8022.9312 c-8005.5293 8021.4502 -8005.1445 8018.9502 -8005.7729 8017.2295 c-8006.3125 8015.7598 -8007.8979 8014.4341 -8010.0039 8013.855 c-8011.8774 8013.3374 -8013.8843 8013.5493 -8014.7759 8014.8125 C-8014.1226 8014.8174 -8013.5757 8014.959 -8013.2896 8015.3125 C-8013.1528 8015.707 -8013.0215 8016.103 -8013.1895 8016.6909 C-8013.6353 8017.4189 -8014.4819 8018.0542 -8015.6528 8017.6768 c-8016.8955 8017.2773 -8017.6475 8016.043 -8017.4883 8014.8135 C-8012.1855 8008.6675 -8004.4736 8006.1104 -7995.6895 8005.5181 C-7995.7236 8005.5327 -7995.7568 8005.5439 -7995.7954 8005.562 c-7996.9365 8006.0703 -7997.7378 8006.5781 -7998.6787 8007.2476 c-7999.0308 8007.498 -7999.4795 8007.6558 -7999.7778 8007.8965 c-7999.8843 8007.9814 -7999.9116 8008.187 -8000.0269 8008.2949 c-8000.4058 8008.6533 -8000.8325 8008.9341 -8001.1919 8009.3701 c-8002.3296 8010.7534 -8003.3013 8012.8989 -8002.8159 8015.0654 C-8002.0879 8016.4863 -8001.0513 8017.7085 -7998.9346 8018.2783 c-7998.7139 8018.3398 -7998.4893 8018.3262 -7998.2627 8018.3823 C-7995.2969 8018.5181 -7993.2725 8016.167 -7993.8018 8013.3398 C-7994.0132 8013.1382 -7994.1821 8012.9077 -7994.2539 8012.6157 C-7995.0933 8011.7749 -7997.3687 8011.5151 -7998.0347 8012.4165 C-7997.5659 8012.3647 -7997.3555 8012.3501 -7997.0737 8012.6758 C-7996.7456 8013.6118 -7997.8545 8014.2261 -7998.7109 8013.5693 C-7999.2402 8012.6509 -7999.0938 8011.7334 -7998.5835 8010.6958 c-7998.3765 8010.2749 -7998.0342 8009.9644 -7997.7231 8009.5742 c-7997.3086 8009.0581 -7996.9595 8008.5054 -7996.5024 8008.127 c-7996.0913 8007.7871 -7995.5669 8007.5742 -7995.1255 8007.3013 c-7995.0059 8007.2295 -7994.9395 8007.1279 -7994.8398 8007.0718 c-7994.4946 8006.8755 -7994.2285 8006.6675 -7993.8789 8006.5117 c-7993.4175 8006.3062 -7992.8911 8006.2021 -7992.3608 8005.979 c-7992.0986 8005.8701 -7991.8799 8005.6597 -7991.6064 8005.5493 c-7991.4419 8005.4854 -7991.2661 8005.4341 -7991.0942 8005.3789 C-7989.7046 8005.3823 -7988.2969 8005.4214 -7986.8726 8005.499 c-7985.1636 8005.5439 -7982.9009 8005.5581 -7981.0078 8005.6309 C-7948.9038 8002.1182 -7916.4155 8001.1948 -7883.9097 8000.7461 C-7810.5015 8002.0796 -7720.3125 8003.7134 -7718.7886 8003.7134 c-7716.2129 8003.7134 -7714.1265 8001.6245 -7714.1265 7999.0493 c-7714.1265 7996.4727 -7716.2129 7994.3838 -7718.7886 7994.3838 cfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 10 pt \221\310\211~/ Adobe Calligraphic) -( Brush Tool/ Touch Calligraphic Brush/ Adobe ArtOnPath Brush T) -(ool/ \211\324\202\314\214s 5/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(10 pt \621\710\611~)(1 10 10 75 75 -20 110 1 0 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Touch Calligraphic Brush)(1 12 12 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(\611\724\602\714\614s 5)(1 / Unnamed Brush Pat 40/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623]) 0 Xs([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])Pc0 0 0 0 k(\603z\603\617\603C\603g)Pc0 0 0 1 k(\603u\603\611\603b\603N)Pc0 1 1 0 k(CMYK \603\614\603b\603h)Pc0 0 1 0 k(CMYK \603C\603G\603\615\601[)Pc1 0 1 0 k(CMYK \603O\603\612\601[\603\623)Pc1 0 0 0 k(CMYK \603V\603A\603\623)Pc1 1 0 0 k(CMYK \603u\603\613\601[)Pc0 1 0 0 k(CMYK \603}\603[\603\623\603^)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1)PcBb0 0 0 0 Bh2 (\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)PcBb2 (\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613)PcBb0 0 0 0 Bh2 (\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\)) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\))Pc(\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h)Pc0 0 0 1 k(C=0 M=0 Y=0 K=100)Pc0 0 0 0.899994 k(C=0 M=0 Y=0 K=90)Pc0 0 0 0.799988 k(C=0 M=0 Y=0 K=80)Pc0 0 0 0.699997 k(C=0 M=0 Y=0 K=70)Pc0 0 0 0.599991 k(C=0 M=0 Y=0 K=60)Pc0 0 0 0.5 k(C=0 M=0 Y=0 K=50)Pc0 0 0 0.399994 k(C=0 M=0 Y=0 K=40)Pc0 0 0 0.299988 k(C=0 M=0 Y=0 K=30)Pc0 0 0 0.199997 k(C=0 M=0 Y=0 K=20)Pc0 0 0 0.099991 k(C=0 M=0 Y=0 K=10)Pc0 0 0 0.049988 k(C=0 M=0 Y=0 K=5)Pc0.1 0.7 0.8 0 k(C=10 M=70 Y=80 K=0)Pc0.1 0.5 0.8 0 k(C=10 M=50 Y=80 K=0)Pc0.65 0.1 1 0 k(C=65 M=10 Y=100 K=0)Pc0.5 0.9 0.1 0 k(C=50 M=90 Y=10 K=0)Pc0.25 0.85 0.6 0.1 k(C=25 M=85 Y=60 K=10)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 0 1 0 0 1 1 255 79 79 0 50 Lb(\203K\203C\203h) Ln1 A0 A1 Ap0 R0 1 0 0 K0 J 0 j 0.340157 w 10 M []0 d0 XR160.1572 -8.50391 m160.1572 -266.4561 L4.25195 -266.4561 L4.25195 -8.50391 L160.1572 -8.50391 Ls/BBAccumRotation (1.570796) XT1 0 1 0 K154.4883 -14.1738 m154.4883 -260.7871 L9.9209 -260.7871 L9.9209 -14.1738 L154.4883 -14.1738 Ls/BBAccumRotation (1.570796) XT1 0 0 0 K164.4092 -4.25165 m164.4092 -270.7083 L0 -270.7083 L0 -4.25165 L164.4092 -4.25165 Ls/BBAccumRotation (1.570796) XTu0 Ap0.340157 w0 48.7959 m0 7.18164 lSu0 O1 0 0 0 k1 w0 5.12891 m-0.358398 6.09473 -0.970215 7.29346 -1.61768 8.03613 c0 7.45117 l1.61719 8.03613 l0.969727 7.29346 0.35791 6.09473 0 5.12891 cfUUu0 R0 1 0 0 K0.340157 w4.08691 33.7959 m4.08691 7.18164 lSu0 O0 1 0 0 k1 w4.08691 5.12891 m3.72852 6.09473 3.1167 7.29346 2.46924 8.03613 c4.08691 7.45117 l5.7041 8.03613 l5.05664 7.29346 4.44482 6.09473 4.08691 5.12891 cfUUu0 R1 0 1 0 K0.340157 w9.9209 18.7959 m9.9209 7.18164 lSu0 O1 0 1 0 k1 w9.9209 5.12891 m9.5625 6.09473 8.95068 7.29346 8.30322 8.03613 c9.9209 7.45117 l11.5381 8.03613 l10.8906 7.29346 10.2788 6.09473 9.9209 5.12891 cfUUu*u1 0 0 0 k0.560059 53.4951 m0.907227 53.3184 1.34619 53.0488 1.56592 52.8506 c1.28955 52.5107 L1.07715 52.709 0.638184 52.9995 0.28418 53.1904 C0.560059 53.4951 lf3.76025 49.4385 m3.76025 48.8081 L6.79785 48.8081 L6.79785 48.4043 L0.28418 48.4043 L0.28418 48.8081 L3.28613 48.8081 L3.28613 49.4385 L1.04883 49.4385 L1.04883 49.835 L3.28613 49.835 L3.28613 50.3164 L3.89502 50.2808 L3.88818 50.2314 3.85254 50.1958 3.76025 50.1816 c3.76025 49.835 L6.0332 49.835 L6.0332 49.4385 L3.76025 49.4385 lf0.524902 50.4932 m0.82959 50.8755 1.26123 51.4985 1.60107 52.0649 c1.88428 51.8027 L1.57959 51.2793 1.20459 50.6982 0.935547 50.3374 c0.949707 50.3091 0.956543 50.2808 0.956543 50.2598 c0.956543 50.2314 0.949707 50.2031 0.928223 50.1748 C0.524902 50.4932 lf0.978027 54.7197 m1.31787 54.5361 1.73584 54.2598 1.94092 54.0615 c1.70752 53.8066 1.6792 53.7642 1.65088 53.7285 c1.45264 53.9341 1.03467 54.2246 0.694824 54.4229 C0.978027 54.7197 lf2.84717 52.9287 m2.84717 53.3037 L2.52881 53.1128 2.18164 52.9355 1.8418 52.7871 c1.79248 52.8936 1.68604 53.0562 1.60791 53.1484 c2.52881 53.5093 3.47705 54.1465 3.93018 54.7627 c4.55322 54.7344 L4.53955 54.6987 4.49658 54.6631 4.43994 54.6563 c4.98535 54.0615 5.96924 53.481 6.80518 53.1904 c6.71289 53.0845 6.60693 52.9146 6.54297 52.7939 c5.70752 53.127 4.72314 53.7432 4.15674 54.3662 c3.85254 54.0117 3.38525 53.6367 2.854 53.311 c5.4668 53.311 L5.4668 52.9287 L4.39063 52.9287 L4.39063 52.4189 L6.01221 52.4189 L6.01221 52.0293 L4.39063 52.0293 L4.39063 50.8896 L4.39063 50.4297 4.15674 50.415 3.36377 50.415 c3.34277 50.5283 3.28613 50.6914 3.22217 50.7979 c3.5127 50.7905 3.76758 50.7905 3.84521 50.7905 c3.92334 50.7979 3.94482 50.8188 3.94482 50.8896 c3.94482 52.0293 L2.31592 52.0293 L2.31592 52.4189 L3.94482 52.4189 L3.94482 52.9287 L2.84717 52.9287 lf3.45605 51.6328 m3.43506 51.5908 3.39209 51.5762 3.32861 51.5762 c3.03857 51.2437 2.52148 50.8115 2.00439 50.5215 c1.93408 50.5996 1.81348 50.7129 1.72119 50.7832 c2.21729 51.0527 2.71973 51.4702 2.99561 51.8311 C3.45605 51.6328 lf6.25244 50.5566 m5.96924 50.833 5.396 51.2646 4.94287 51.5693 c5.24756 51.8174 L5.69336 51.5269 6.27393 51.1094 6.57129 50.8398 C6.25244 50.5566 lf*U*u8.8291 50.5923 m8.69482 50.9746 8.63086 51.5269 8.62354 51.9233 c8.62354 52.5889 8.69482 53.3604 8.86475 54.2598 c9.57275 54.1396 L9.54443 54.0474 9.45947 54.0264 9.36719 54.019 c9.22559 53.4316 9.12646 52.5322 9.12646 51.959 c9.12646 51.8027 9.1333 51.6758 9.14795 51.5762 c9.28955 51.9233 9.55127 52.4048 9.69971 52.6738 c9.76367 52.582 9.90527 52.4331 9.97607 52.3623 c9.45215 51.4209 9.29639 51.1514 9.29639 50.8545 c9.29639 50.7979 9.30322 50.7412 9.31787 50.6772 C8.8291 50.5923 lf12.624 54.4438 m12.6167 54.3589 12.5601 54.3232 12.4399 54.2881 c12.4897 53.6719 12.5601 52.6455 12.5601 51.8311 c12.5532 50.4648 12.0576 49.2329 9.92627 48.3477 c9.84863 48.4609 9.67871 48.6523 9.57275 48.7588 c11.5054 49.4951 12.022 50.6631 12.022 51.8242 c12.022 52.6953 11.937 53.7217 11.8594 54.4795 C12.624 54.4438 lf*U*u17.9897 50.4224 m17.9897 48.8647 L18.521 48.7588 18.769 48.7588 21.0273 48.7588 c20.9565 48.6455 20.8784 48.4258 20.8501 48.2983 c19.2505 48.2983 L17.6997 48.2983 16.5952 48.5815 15.9224 49.8633 c15.6821 49.2119 15.314 48.5889 14.7759 48.1709 c14.6978 48.27 14.5347 48.4258 14.4287 48.5039 c15.314 49.1621 15.6675 50.394 15.7808 51.4419 c16.4038 51.3496 L16.397 51.3003 16.3545 51.272 16.2622 51.2646 c16.2271 51.0171 16.1772 50.748 16.1138 50.479 c16.4038 49.686 16.8784 49.2402 17.5015 49.0063 c17.5015 51.9233 L15.3491 51.9233 L15.3491 54.4155 L20.2344 54.4155 L20.2344 51.9233 L17.9897 51.9233 L17.9897 50.8755 L20.4326 50.8755 L20.4326 50.4224 L17.9897 50.4224 lf1 D15.8237 53.9551 m15.8237 52.3838 L19.7388 52.3838 L19.7388 53.9551 L15.8237 53.9551 lf*U*u0 D23.8306 54.4648 m23.8159 54.3799 23.7524 54.3306 23.6108 54.3096 c23.5542 53.4883 23.4834 51.6118 23.4834 50.564 c23.4834 49.5088 24.0073 48.999 24.8994 48.999 c25.7632 48.999 26.6411 49.4312 27.4482 50.3447 c27.519 50.2314 27.6821 50.0049 27.7671 49.9268 c26.9385 48.9854 25.9331 48.4893 24.8921 48.4893 c23.604 48.4893 22.9453 49.2329 22.9453 50.5713 c22.9453 51.4629 23.0093 53.6582 23.0586 54.5288 C23.8306 54.4648 lf*U*u29.3022 48.5889 m29.083 49.0986 28.998 50.1533 28.998 51.0811 c28.998 52.0225 29.147 53.2051 29.3804 54.3872 c30.0669 54.2529 L30.0532 54.1816 29.9819 54.1323 29.8833 54.125 c29.6284 53.1553 29.4722 51.895 29.4722 51.0737 c29.4722 50.5356 29.4795 49.9976 29.5361 49.7354 c29.6919 50.1602 29.9751 50.8398 30.1235 51.1729 c30.4424 50.8755 L30.2085 50.394 29.7134 49.3179 29.7134 48.9854 c29.7134 48.8857 29.7344 48.7798 29.7837 48.6455 C29.3022 48.5889 lf31.1011 52.7588 m31.6958 52.752 32.2905 52.7446 32.8853 52.7871 c32.8569 53.396 32.8354 53.9199 32.8213 54.4438 c33.5366 54.4229 L33.5293 54.3516 33.4653 54.2949 33.3521 54.2739 c33.3594 53.8208 33.3735 53.3604 33.3877 52.8223 c33.9468 52.8789 34.3999 52.9785 34.7754 53.1055 c34.8394 52.6104 L34.4995 52.5039 34.0107 52.4048 33.4087 52.3555 c33.437 51.5693 33.4727 50.7412 33.4937 50.2881 c34.0317 50.0684 34.5698 49.7217 34.938 49.3887 c34.6621 48.9355 L34.3716 49.2256 33.9541 49.5371 33.5151 49.7427 c33.5083 49.1406 33.395 48.4683 32.3325 48.4683 c31.5044 48.4683 30.9521 48.8647 30.9521 49.4878 c30.9521 50.21 31.6812 50.5283 32.3325 50.5283 c32.5522 50.5283 32.7856 50.5 33.0054 50.4365 c32.9839 50.8828 32.9419 51.626 32.9063 52.3198 c32.687 52.3057 32.3892 52.2988 32.1841 52.2988 c31.1079 52.2988 L31.1011 52.7588 lf1 D33.0405 49.9766 m32.814 50.0469 32.5737 50.1035 32.3398 50.1035 c31.9077 50.1035 31.3911 49.9482 31.3911 49.502 c31.3911 49.1055 31.8159 48.9072 32.3325 48.9072 c32.8569 48.9072 33.0479 49.1621 33.0479 49.7285 C33.0405 49.9766 lf*U*u0 D41.3306 48.9214 m40.7075 48.8081 39.8862 48.7588 39.1782 48.7588 c38.5835 48.7588 38.0669 48.7939 37.7905 48.8506 c36.9341 49.042 36.5659 49.5801 36.5659 50.2031 c36.5659 50.748 36.8706 51.293 37.2881 51.7178 c37.6987 51.5059 L37.3022 51.0947 37.0757 50.6416 37.0757 50.2451 c37.0757 49.835 37.3521 49.4595 37.9604 49.3252 c38.2085 49.2686 38.6265 49.2402 39.1147 49.2402 c39.8013 49.2402 40.6226 49.2969 41.2954 49.4312 C41.3306 48.9214 lf38.1519 52.4971 m38.52 52.7803 39.0229 53.127 39.4048 53.3184 c39.4048 53.3252 L38.8667 53.2617 37.6353 53.2334 36.8491 53.2402 c36.8491 53.375 36.8491 53.6084 36.8423 53.7358 c36.9976 53.7285 39.7163 53.6865 40.8774 53.9624 c40.9341 53.4385 L40.0918 53.3394 39.0083 52.603 38.5552 52.2422 C38.1519 52.4971 lf*U*u46.4702 53.481 m46.4419 53.417 46.3853 53.3677 46.2935 53.3677 c46.0386 51.166 45.3022 49.2471 44.1265 49.2471 c43.5317 49.2471 42.9937 49.8418 42.9937 50.9604 c42.9937 52.6597 44.3179 54.083 46.1802 54.083 c48.2261 54.083 49.1108 52.7871 49.1108 51.4063 c49.1108 49.7217 48.1343 48.9072 46.4204 48.5107 c46.3569 48.624 46.2368 48.8154 46.1235 48.9424 c47.7515 49.2539 48.5874 50.0469 48.5874 51.3853 c48.5874 52.5537 47.8364 53.6152 46.1802 53.6152 c46.1089 53.6152 46.0313 53.6084 45.9673 53.6016 C46.4702 53.481 lf1 D45.7905 53.5732 m44.3604 53.396 43.4751 52.2139 43.4751 50.9746 c43.4751 50.2168 43.8013 49.7427 44.1411 49.7427 c44.9976 49.7427 45.6138 51.6328 45.7905 53.5732 cf*U*u0 D55.7939 52.2705 m55.7798 52.2422 55.7446 52.2139 55.7017 52.1992 c55.1216 50.0615 53.939 49.0205 51.8218 48.4326 c51.7583 48.5605 51.6235 48.7373 51.5249 48.8438 c53.4507 49.3252 54.647 50.3164 55.0933 51.959 c50.4058 51.959 L50.4058 52.4404 L55.3052 52.4404 L55.3765 52.4824 L55.7939 52.2705 lf55.1284 53.7852 m51.0928 53.7852 L51.0928 54.2529 L55.1284 54.2529 L55.1284 53.7852 lf*U*u62.9585 54.1182 m62.9302 54.083 62.8872 54.0615 62.8237 54.0615 c62.8022 54.0615 62.7813 54.0615 62.7529 54.0684 c62.2075 53.5166 61.4219 52.8721 60.7349 52.3765 c60.7915 52.3555 60.8765 52.3125 60.9048 52.2988 c60.8911 52.2559 60.8271 52.2139 60.7495 52.2065 c60.7495 48.4043 L60.2324 48.4043 L60.2324 52.0439 L59.4819 51.5127 58.5049 50.9395 57.5347 50.4648 c57.4644 50.5781 57.3364 50.7549 57.2378 50.8545 c59.1704 51.7461 61.2876 53.2617 62.4272 54.5146 C62.9585 54.1182 lf*U*u64.8765 53.998 m65.6128 53.7642 66.4624 53.396 66.9858 53.0352 c66.7173 52.5889 L66.2075 52.9502 65.3716 53.3252 64.6499 53.5732 C64.8765 53.998 lf64.8481 49.0913 m67.3613 49.8701 69.0322 51.2793 69.8818 53.2402 c70.0308 53.1201 70.1934 53.0278 70.3423 52.9502 c69.457 51.0098 67.7295 49.502 65.3296 48.7021 c65.3223 48.6382 65.2798 48.5674 65.23 48.5391 C64.8481 49.0913 lf*U*u71.6865 53.6719 m72.1255 53.6436 72.7134 53.6436 73.1948 53.6436 c73.5132 53.6436 73.8745 53.6509 74.1714 53.6582 c74.1646 53.998 74.1577 54.3945 74.1577 54.6421 c74.8726 54.6064 L74.8657 54.5215 74.8018 54.4795 74.6812 54.458 c74.6743 54.3447 74.6812 53.7998 74.6812 53.6792 c75.5098 53.7217 76.3311 53.7925 77.0317 53.9551 c77.0957 53.4883 L76.4019 53.332 75.5806 53.2617 74.6812 53.2188 c74.6885 52.7939 74.6958 52.3555 74.7095 51.916 c75.3965 51.959 76.1328 52.0508 76.7065 52.1924 c76.7632 51.7324 L76.1685 51.6045 75.4248 51.5195 74.7168 51.4844 c74.7734 50.3018 L75.4248 50.0898 76.1187 49.7217 76.855 49.1973 c76.5435 48.7656 L75.9063 49.2686 75.3042 49.6084 74.7876 49.8066 c74.7876 49.6934 74.7944 49.5654 74.7944 49.4736 c74.7876 48.8008 74.3843 48.4116 73.5273 48.4116 c72.6284 48.4116 71.9697 48.7798 71.9697 49.4453 c71.9697 50.125 72.7417 50.5 73.5347 50.5 c73.7681 50.5 74.0161 50.479 74.2778 50.415 c74.271 50.7197 74.2563 51.0879 74.2495 51.4702 c74.0229 51.4629 73.7681 51.4561 73.563 51.4561 c72.3521 51.4561 72.0122 51.6475 72.0122 52.0576 c72.0122 52.3271 72.2173 52.5464 72.6704 52.8369 c73.0103 52.6172 L72.6919 52.4404 72.522 52.2842 72.522 52.1426 c72.522 51.9307 72.855 51.8877 73.7539 51.8877 c73.9097 51.8877 74.0728 51.8877 74.228 51.895 c74.186 53.2051 L73.8813 53.1904 73.5273 53.1904 73.2085 53.1904 c72.7554 53.1904 72.1113 53.1904 71.6865 53.2051 C71.6865 53.6719 lf1 D74.3062 49.9834 m74.0229 50.0615 73.7612 50.0967 73.5132 50.0967 c72.9751 50.0967 72.4302 49.877 72.4302 49.4521 c72.4302 49.0347 72.9253 48.8291 73.5415 48.8291 c74.1011 48.8291 74.313 49.0771 74.313 49.5728 C74.3062 49.9834 lf*U*u0 D78.5322 53.8135 m79.063 53.835 83.4243 54.1465 84.3457 54.1533 c84.3516 53.6226 L84.2598 53.6299 84.1758 53.6299 84.0898 53.6299 c83.6797 53.6299 83.3325 53.5586 82.8794 53.2686 c81.8174 52.6313 80.7905 51.4912 80.7905 50.5781 c80.7905 49.5869 81.4849 48.999 83.2407 48.7725 c83.0068 48.2773 L80.9961 48.5674 80.2456 49.3179 80.2456 50.5781 c80.2456 51.5762 81.23 52.7871 82.5254 53.6016 c81.7466 53.5449 79.6577 53.3887 78.7446 53.3037 c78.7231 53.2471 78.6455 53.1978 78.5889 53.1904 C78.5322 53.8135 lf83.1201 52.4189 m83.46 52.1641 83.8633 51.7461 84.083 51.4419 c83.8145 51.2227 L83.6152 51.5342 83.1841 51.9727 82.8794 52.2065 C83.1201 52.4189 lf83.8848 53.042 m84.2324 52.7871 84.6426 52.3765 84.8477 52.0649 c84.5781 51.8525 L84.3867 52.1357 83.9766 52.5747 83.6445 52.8296 C83.8848 53.042 lf*UUu*u0 1 0 0 k5.71387 37.5107 m5.43066 37.0508 5.11914 36.6401 4.80078 36.3003 c4.74414 36.4136 4.62402 36.6401 4.5459 36.7461 c5.26074 37.4824 5.96191 38.7217 6.37988 39.9746 c6.95996 39.7837 L6.93164 39.7344 6.88232 39.7129 6.79736 39.7129 c6.60645 39.2031 6.37988 38.7002 6.125 38.2188 c6.32324 38.1621 L6.31592 38.1128 6.27344 38.0845 6.18848 38.0703 c6.18848 33.4473 L5.71387 33.4473 L5.71387 37.5107 lf11.3145 37.2632 m9.17627 37.2632 L9.17627 34.2119 L11.1943 34.2119 L11.1943 33.7515 L6.80469 33.7515 L6.80469 34.2119 L8.6875 34.2119 L8.6875 37.2632 L6.63477 37.2632 L6.63477 37.7305 L8.6875 37.7305 L8.6875 39.918 L9.31055 39.876 L9.30371 39.8262 9.26855 39.791 9.17627 39.7837 c9.17627 37.7305 L11.3145 37.7305 L11.3145 37.2632 lf*U*u15.0518 34.2686 m18.2666 34.2686 L18.2666 33.7871 L11.8306 33.7871 L11.8306 34.2686 L14.5566 34.2686 L14.5566 39.9111 L15.2007 39.8687 L15.1934 39.8193 15.1514 39.7837 15.0518 39.7695 c15.0518 37.6738 L17.7705 37.6738 L17.7705 37.1924 L15.0518 37.1924 L15.0518 34.2686 lf*U*u21.5859 39.6846 m21.5723 39.5996 21.4873 39.5645 21.3525 39.5571 c21.2744 39.1606 21.1475 38.4736 21.0625 38.0488 c21.3809 38.0845 21.6709 38.1128 21.8481 38.1128 c22.9243 38.127 23.2925 37.4121 23.2925 36.3496 c23.2925 35.8188 23.1934 35.1885 23.0518 34.7637 c22.832 34.042 22.3789 33.6948 21.7915 33.6948 c21.501 33.6948 21.1191 33.8154 20.5098 34.3105 c20.5879 34.4385 20.6445 34.5938 20.7012 34.7427 c21.2676 34.3037 21.5649 34.2046 21.7842 34.2046 c22.188 34.2046 22.4287 34.4595 22.5703 34.9126 c22.7188 35.3516 22.7969 36.0029 22.7969 36.3643 c22.79 37.1709 22.5278 37.6523 21.8198 37.6455 c21.6074 37.6455 21.3174 37.6172 20.9561 37.5747 c20.6021 36.1304 20.1846 34.8916 19.5049 33.7515 c19.0371 33.978 L19.7241 35.0752 20.1133 36.1729 20.4463 37.5181 c20.085 37.4756 19.5684 37.4121 19.186 37.3481 c19.1436 37.8438 L19.4902 37.8862 20.0713 37.9502 20.5454 38.0068 c20.6514 38.5234 20.7646 39.1606 20.8496 39.7837 C21.5859 39.6846 lf23.2285 39.9043 m23.5684 39.6421 23.9722 39.2173 24.1777 38.9131 c23.9014 38.7148 L23.7031 39.019 23.2783 39.4648 22.9668 39.6987 C23.2285 39.9043 lf24.8145 35.7832 m24.5811 36.8027 24.0215 37.6597 23.3701 38.1978 c23.7813 38.4736 L24.4819 37.8862 25.0908 37.001 25.3242 35.9746 C24.8145 35.7832 lf24.2979 40.1802 m24.6445 39.9253 25.0483 39.5005 25.2539 39.1963 c24.9775 38.9907 L24.7793 39.2949 24.3545 39.748 24.043 39.9819 C24.2979 40.1802 lf*U*u27.4194 35.8472 m27.2852 36.2295 27.2212 36.7817 27.2139 37.1782 c27.2139 37.8438 27.2852 38.6152 27.4551 39.5146 c28.1631 39.3945 L28.1348 39.3022 28.0498 39.2813 27.9575 39.2739 c27.8159 38.6865 27.7168 37.7871 27.7168 37.2139 c27.7168 37.0576 27.7236 36.9307 27.7383 36.8311 c27.8799 37.1782 28.1416 37.6597 28.29 37.9287 c28.354 37.8369 28.4956 37.688 28.5664 37.6172 c28.0425 36.6758 27.8867 36.4063 27.8867 36.1094 c27.8867 36.0527 27.8936 35.9961 27.9082 35.9321 C27.4194 35.8472 lf31.2144 39.6987 m31.207 39.6138 31.1504 39.5781 31.0303 39.543 c31.0801 38.9268 31.1504 37.9004 31.1504 37.0859 c31.1436 35.7197 30.6479 34.4878 28.5166 33.6025 c28.439 33.7158 28.269 33.9072 28.1631 34.0137 c30.0957 34.75 30.6123 35.918 30.6123 37.0791 c30.6123 37.9502 30.5273 38.9766 30.4497 39.7344 C31.2144 39.6987 lf*U*u38.9521 37.5254 m38.938 37.4971 38.9023 37.4688 38.8604 37.4541 c38.2793 35.3164 37.0972 34.2754 34.9805 33.6875 c34.9165 33.8154 34.7822 33.9922 34.6826 34.0986 c36.6084 34.5801 37.8052 35.5713 38.251 37.2139 c33.5645 37.2139 L33.5645 37.6953 L38.4639 37.6953 L38.5342 37.7373 L38.9521 37.5254 lf38.2866 39.04 m34.251 39.04 L34.251 39.5078 L38.2866 39.5078 L38.2866 39.04 lf*U*u46.1162 39.373 m46.0879 39.3379 46.0459 39.3164 45.9819 39.3164 c45.9609 39.3164 45.9395 39.3164 45.9111 39.3232 c45.3662 38.7715 44.5801 38.127 43.8936 37.6313 c43.9502 37.6104 44.0352 37.5674 44.0635 37.5537 c44.0488 37.5107 43.9854 37.4688 43.9072 37.4614 c43.9072 33.6592 L43.3906 33.6592 L43.3906 37.2988 L42.6401 36.7676 41.6631 36.1943 40.6934 35.7197 c40.6221 35.833 40.4951 36.0098 40.3955 36.1094 c42.3286 37.001 44.4453 38.5166 45.5854 39.7695 C46.1162 39.373 lf*U*u48.0342 39.2529 m48.7705 39.019 49.6201 38.6509 50.1445 38.29 c49.875 37.8438 L49.3652 38.2051 48.5303 38.5801 47.8076 38.8281 C48.0342 39.2529 lf48.0059 34.3462 m50.5195 35.125 52.1904 36.5342 53.04 38.4951 c53.1885 38.375 53.3516 38.2827 53.5 38.2051 c52.6152 36.2646 50.8877 34.7568 48.4873 33.957 c48.4805 33.8931 48.438 33.8223 48.3887 33.7939 C48.0059 34.3462 lf*U*u60.8555 39.9961 m60.084 39.3516 59.4541 38.1694 59.4541 36.7393 c59.4541 35.2734 60.1055 34.1055 60.8555 33.4824 c60.8555 33.4473 L60.4307 33.4473 L59.7158 34.0913 59.0786 35.2808 59.0786 36.7393 c59.0786 38.1978 59.7158 39.3872 60.4307 40.0313 c60.8555 40.0313 L60.8555 39.9961 lf*U*u64.126 36.5552 m63.8359 36.187 63.4248 35.9678 62.9082 35.9678 c62.002 35.9678 61.4424 36.6758 61.4424 37.5747 c61.4424 38.5449 62.0801 39.4365 63.1206 39.4365 c64.1118 39.4365 64.7422 38.5732 64.7422 37.2207 c64.7422 35.458 63.8496 34.2329 62.4902 34.0205 c62.2427 33.978 62.0161 33.9639 61.8604 33.9707 c61.8604 34.4595 L62.0088 34.4453 62.1787 34.4668 62.4053 34.4951 c63.2979 34.6221 63.9702 35.3447 64.1475 36.5552 C64.126 36.5552 lf1 D62.0371 37.6104 m62.0371 36.895 62.4409 36.4136 63.0498 36.4136 c63.623 36.4136 64.1475 36.8525 64.1475 37.2773 c64.1475 38.2969 63.772 38.9834 63.0713 38.9834 c62.4551 38.9834 62.0371 38.4033 62.0371 37.6104 cf*U*u0 D66.8623 34.0488 m66.8623 38.7998 L66.8481 38.7998 L65.9775 38.2969 L65.8359 38.7358 L66.9331 39.3516 L67.4355 39.3516 L67.4355 34.0488 L66.8623 34.0488 lf*U*u74.7393 34.75 m74.4277 34.4312 L72.4663 36.3926 L70.5122 34.4312 L70.2007 34.75 L72.1548 36.7041 L70.2007 38.6582 L70.5122 38.9766 L72.4663 37.0156 L74.4277 38.9766 L74.7393 38.665 L72.7852 36.7041 L74.7393 34.75 lf*U*u79.3047 39.3516 m79.3047 38.8633 L77.4004 38.8633 L77.1807 37.3623 L77.2939 37.3765 77.4072 37.3906 77.5918 37.3906 c78.5332 37.3906 79.376 36.8311 79.376 35.7622 c79.376 34.7144 78.5967 33.9639 77.5488 33.9639 c77.0181 33.9639 76.5723 34.1196 76.3311 34.2754 c76.501 34.7354 L76.6992 34.6011 77.0889 34.4385 77.5488 34.4385 c78.2148 34.4385 78.7881 34.9268 78.7813 35.6914 c78.7813 36.4209 78.3135 36.9307 77.3223 36.9307 c77.0391 36.9307 76.8198 36.9092 76.6426 36.8809 c76.9756 39.3516 L79.3047 39.3516 lf*U*u83.21 39.3516 m83.21 38.8633 L81.3052 38.8633 L81.0859 37.3623 L81.1992 37.3765 81.3125 37.3906 81.4961 37.3906 c82.438 37.3906 83.2803 36.8311 83.2803 35.7622 c83.2803 34.7144 82.502 33.9639 81.4541 33.9639 c80.9229 33.9639 80.4766 34.1196 80.2363 34.2754 c80.4063 34.7354 L80.6045 34.6011 80.9937 34.4385 81.4541 34.4385 c82.1191 34.4385 82.6929 34.9268 82.6855 35.6914 c82.6855 36.4209 82.2188 36.9307 81.2275 36.9307 c80.9443 36.9307 80.7246 36.9092 80.5479 36.8809 c80.8804 39.3516 L83.21 39.3516 lf*U*u89.6563 34.0488 m89.0762 34.0488 L89.0762 36.2793 L89.0762 37.0293 88.8066 37.5107 88.2266 37.5107 c87.752 37.5107 87.3203 37.0649 87.3203 36.4775 c87.3203 34.0488 L86.7393 34.0488 L86.7393 36.4277 L86.7393 37.0439 86.4775 37.5107 85.9316 37.5107 c85.4297 37.5107 84.9834 37.0156 84.9834 36.4136 c84.9834 34.0488 L84.4023 34.0488 L84.4023 36.916 L84.4023 37.3125 84.3887 37.5957 84.375 37.9146 c84.8916 37.9146 L84.9268 37.2915 L84.9482 37.2915 L85.1602 37.667 85.5146 37.9995 86.123 37.9995 c86.626 37.9995 87.0156 37.688 87.1777 37.2275 c87.1924 37.2275 L87.4473 37.688 87.8369 37.9995 88.4316 37.9995 c88.9063 37.9995 89.6563 37.6953 89.6563 36.3711 C89.6563 34.0488 lf*U*u96.0557 34.0488 m95.4746 34.0488 L95.4746 36.2793 L95.4746 37.0293 95.2061 37.5107 94.625 37.5107 c94.1514 37.5107 93.7188 37.0649 93.7188 36.4775 c93.7188 34.0488 L93.1387 34.0488 L93.1387 36.4277 L93.1387 37.0439 92.877 37.5107 92.332 37.5107 c91.8291 37.5107 91.3828 37.0156 91.3828 36.4136 c91.3828 34.0488 L90.8027 34.0488 L90.8027 36.916 L90.8027 37.3125 90.7881 37.5957 90.7734 37.9146 c91.291 37.9146 L91.3262 37.2915 L91.3477 37.2915 L91.5596 37.667 91.9141 37.9995 92.5225 37.9995 c93.0254 37.9995 93.415 37.688 93.5781 37.2275 c93.5918 37.2275 L93.8467 37.688 94.2363 37.9995 94.8311 37.9995 c95.3047 37.9995 96.0557 37.6953 96.0557 36.3711 C96.0557 34.0488 lf*U*u96.8691 33.4824 m97.6406 34.127 98.2705 35.3091 98.2705 36.7393 c98.2705 38.2051 97.6191 39.373 96.8691 39.9961 c96.8691 40.0313 L97.2939 40.0313 L98.0156 39.3872 98.6465 38.1978 98.6465 36.7393 c98.6465 35.2808 98.0156 34.0913 97.2939 33.4473 c96.8691 33.4473 L96.8691 33.4824 lf*UUu*u1 0 1 0 k11.4443 20.564 m11.4443 20.3091 11.48 20.2666 11.6855 20.2666 c12.3789 20.2666 L12.5703 20.2666 12.6055 20.4507 12.627 21.3076 c12.7334 21.2227 12.9243 21.1377 13.0586 21.1021 c13.0093 20.1108 12.8887 19.8135 12.4146 19.8135 c11.6216 19.8135 L11.1118 19.8135 10.9775 19.9692 10.9775 20.5713 c10.9775 22.4404 L10.1699 22.2632 L10.085 22.6953 L10.9775 22.8936 L10.9775 24.8262 L11.5859 24.791 L11.5791 24.7412 11.5439 24.7061 11.4443 24.6914 c11.4443 22.9995 L12.6128 23.2617 12.8604 23.3037 13.1084 23.3467 c13.1226 23.2471 13.1436 23.1484 13.1934 22.9219 c11.4443 22.5391 L11.4443 20.564 lf16.3794 24.373 m16.6416 24.3516 L16.6343 24.3096 16.6343 24.2383 16.627 24.189 c16.5137 20.4224 16.4077 19.1973 16.1104 18.8291 c15.9053 18.5532 15.6855 18.5176 15.2183 18.5176 c15.0127 18.5176 14.7793 18.5322 14.5459 18.5459 c14.5386 18.6875 14.4819 18.8931 14.397 19.0273 c14.8291 18.999 15.2109 18.9922 15.374 18.9922 c15.5088 18.9922 15.5864 19.0205 15.6714 19.1123 c15.9053 19.3887 16.0396 20.6064 16.1387 23.9131 c14.5879 23.9131 L14.5176 21.9443 14.397 19.6152 12.4995 18.4399 c12.4219 18.5605 12.2656 18.7231 12.1387 18.8008 c13.9229 19.8418 14.0571 22.001 14.0996 23.9131 c12.7754 23.9131 L12.7754 24.373 L16.3794 24.373 lf*U*u17.5894 23.4033 m18.1631 23.4033 18.6865 23.4526 18.9204 23.5093 c18.9346 23.9341 18.9414 24.168 18.9697 24.812 c19.6992 24.7554 L19.6851 24.6777 19.6211 24.6279 19.501 24.6138 c19.4727 24.3022 19.4443 23.8633 19.4302 23.6016 c19.6494 23.5166 L19.4795 23.1768 19.4092 22.7588 19.3662 22.5039 c20.1455 23.2334 21.0088 23.75 21.5967 23.75 c22.2622 23.75 22.5947 23.2827 22.5947 22.4614 c22.5947 22.3691 22.5879 22.2773 22.5811 22.1855 c22.5313 21.5625 22.4604 20.6772 22.4604 20.1108 c22.4604 19.686 22.5098 19.4595 22.8076 19.4595 c23.0195 19.4595 23.4443 19.6719 23.749 19.9336 c23.7632 19.792 23.8198 19.502 23.8481 19.3955 c23.4873 19.1338 23.0625 18.9355 22.7363 18.9355 c22.1416 18.9355 21.9434 19.2896 21.9434 20.0259 c21.9434 20.394 22.0713 22.3408 22.0713 22.3481 c22.0713 22.9639 21.8584 23.2402 21.5117 23.2402 c20.9805 23.2402 20.0889 22.667 19.3525 21.8877 c19.3525 20.8613 19.3525 19.6011 19.3594 18.6382 c18.8638 18.6382 L18.8711 19.0488 18.8638 21.0664 18.8711 21.5195 c18.623 21.0244 18.1416 20.3799 17.582 19.8135 c17.3271 20.2598 L17.915 20.8115 18.5732 21.6685 18.8848 22.3975 c18.8848 22.603 18.8921 22.7939 18.8994 23.0205 c18.6514 22.9639 18.1348 22.9072 17.5967 22.9004 C17.5894 23.4033 lf*U*u24.6758 24.0684 m25.207 24.0898 29.5684 24.4014 30.4883 24.4082 c30.4956 23.8774 L30.4033 23.8848 30.3184 23.8848 30.2334 23.8848 c29.8232 23.8848 29.4761 23.8135 29.0229 23.5234 c27.9609 22.8862 26.9346 21.7461 26.9346 20.833 c26.9346 19.8418 27.6279 19.2539 29.3838 19.0273 c29.1504 18.5322 L27.1396 18.8223 26.3892 19.5728 26.3892 20.833 c26.3892 21.8311 27.373 23.042 28.6689 23.8564 c27.9185 23.8066 25.8018 23.6436 24.8882 23.5586 c24.8672 23.502 24.7891 23.4526 24.7324 23.4453 C24.6758 24.0684 lf*U*u32.1377 18.8438 m31.918 19.3535 31.833 20.4082 31.833 21.3359 c31.833 22.2773 31.9814 23.46 32.2153 24.6421 c32.9023 24.5078 L32.8877 24.4365 32.8174 24.3872 32.7178 24.3799 c32.4629 23.4102 32.3076 22.1499 32.3076 21.3286 c32.3076 20.7905 32.3145 20.2524 32.3711 19.9902 c32.5269 20.415 32.8101 21.0947 32.959 21.4277 c33.2773 21.1304 L33.0439 20.6489 32.5479 19.5728 32.5479 19.2402 c32.5479 19.1406 32.5693 19.0347 32.6191 18.9004 C32.1377 18.8438 lf33.9355 23.0137 m34.5303 23.0068 35.125 22.9995 35.7197 23.042 c35.6914 23.6509 35.6704 24.1748 35.6563 24.6987 c36.3711 24.6777 L36.3643 24.6064 36.3008 24.5498 36.1875 24.5288 c36.1943 24.0757 36.2085 23.6152 36.2227 23.0771 c36.7822 23.1338 37.2354 23.2334 37.6104 23.3604 c37.6738 22.8652 L37.334 22.7588 36.8457 22.6597 36.2441 22.6104 c36.2725 21.8242 36.3076 20.9961 36.3291 20.543 c36.8672 20.3232 37.4053 19.9766 37.7734 19.6436 c37.4971 19.1904 L37.207 19.4805 36.7891 19.792 36.3501 19.9976 c36.3428 19.3955 36.2295 18.7231 35.168 18.7231 c34.3394 18.7231 33.7871 19.1196 33.7871 19.7427 c33.7871 20.4648 34.5166 20.7832 35.168 20.7832 c35.3872 20.7832 35.6211 20.7549 35.8403 20.6914 c35.8193 21.1377 35.7764 21.8809 35.7412 22.5747 c35.5215 22.5605 35.2246 22.5537 35.019 22.5537 c33.9429 22.5537 L33.9355 23.0137 lf1 D35.876 20.2314 m35.6494 20.3018 35.4082 20.3584 35.1748 20.3584 c34.7432 20.3584 34.2261 20.2031 34.2261 19.7568 c34.2261 19.3604 34.6509 19.1621 35.168 19.1621 c35.6914 19.1621 35.8828 19.417 35.8828 19.9834 C35.876 20.2314 lf*U*u0 D38.8418 24.6846 m44.7959 24.6846 L44.7959 18.4326 L44.3076 18.4326 L44.3076 18.7798 L39.3086 18.7798 L39.3086 18.4326 L38.8418 18.4326 L38.8418 24.6846 lf1 D39.3086 19.2256 m44.3076 19.2256 L44.3076 24.2314 L39.3086 24.2314 L39.3086 19.2256 lf0 D43.9111 22.4971 m42.2471 22.4971 L42.6294 21.6328 43.2949 20.8262 44.0098 20.4365 c43.9038 20.3584 43.7622 20.2031 43.6914 20.0825 c43.0332 20.5073 42.417 21.3003 42.0137 22.1641 c42.0137 19.6367 L41.5605 19.6367 L41.5605 22.1216 L41.1567 21.2646 40.562 20.4932 39.9316 20.0684 c39.8613 20.1748 39.7266 20.3232 39.6274 20.4014 c40.2998 20.8047 40.9375 21.626 41.3267 22.4971 c39.7617 22.4971 L39.7617 22.9146 L41.5605 22.9146 L41.5605 23.9482 L42.1479 23.9058 L42.1406 23.8633 42.1055 23.8281 42.0137 23.8135 c42.0137 22.9146 L43.9111 22.9146 L43.9111 22.4971 lf*U*u48.0166 21.916 m48.4839 22.1572 49.2129 22.3271 49.7725 22.3271 c50.8984 22.3271 51.6064 21.6685 51.6064 20.6279 c51.6064 19.3462 50.4805 18.6382 49.0576 18.6382 c48.1367 18.6382 47.5068 19.0063 47.5068 19.6294 c47.5068 20.1533 48.0234 20.5781 48.668 20.5781 c49.4678 20.5781 50.0059 19.9409 50.1123 19.2969 c50.6787 19.5088 51.0894 19.9619 51.0894 20.6206 c51.0894 21.3853 50.5229 21.874 49.6309 21.874 c48.5688 21.874 47.5283 21.3994 47.0605 20.9463 c46.8486 20.748 46.5723 20.4507 46.3809 20.2314 c46.02 20.5923 L46.6572 21.2578 48.6821 23.1904 49.645 24.0898 c49.2344 24.0332 47.8184 23.9766 47.0112 23.9482 c46.9902 23.8984 46.9189 23.8564 46.8623 23.8418 c46.8057 24.4438 L47.7617 24.4512 49.5884 24.5215 50.1055 24.5996 c50.2114 24.6494 L50.5869 24.189 L50.5513 24.1606 50.4873 24.1323 50.417 24.125 c49.9141 23.7148 48.5688 22.4541 48.0166 21.9233 C48.0166 21.916 lf1 D48.9937 19.084 m49.2061 19.084 49.4541 19.1123 49.6377 19.1553 c49.5601 19.7002 49.1563 20.1602 48.6328 20.1602 c48.2646 20.1602 47.9385 19.9619 47.9385 19.6367 c47.9385 19.2046 48.5264 19.084 48.9937 19.084 cf*U*u0 D59.2305 23.3252 m57.9561 23.3252 L58.1406 23.2617 58.1899 23.2471 58.2393 23.2261 c58.2183 23.1768 58.1616 23.1553 58.0625 23.1553 c57.6519 21.9941 57.0928 21.0737 56.3491 20.3301 c57.1494 19.665 58.1333 19.1763 59.3154 18.9072 c59.2021 18.7939 59.0537 18.5815 58.9756 18.4326 c57.7651 18.7441 56.7739 19.2612 55.96 19.9766 c55.1597 19.3037 54.1758 18.8081 52.9717 18.4399 c52.9224 18.5605 52.7881 18.7588 52.6958 18.8721 c53.8569 19.2046 54.8198 19.6719 55.5986 20.3164 c54.834 21.1021 54.2534 22.0791 53.8359 23.2334 c54.126 23.3252 L52.7598 23.3252 L52.7598 23.7925 L55.7261 23.7925 L55.7261 25.0313 L56.3564 24.9893 L56.3491 24.9395 56.3066 24.9043 56.2148 24.8896 c56.2148 23.7925 L59.2305 23.7925 L59.2305 23.3252 lf1 D54.3242 23.3252 m54.6924 22.2915 55.2446 21.3926 55.9883 20.6631 c56.689 21.3643 57.2197 22.2349 57.5952 23.3252 C54.3242 23.3252 lf*U*u0 D66.2607 21.0171 m66.2607 20.564 L63.3223 20.564 L63.3223 19.0347 L63.3223 18.4683 62.9824 18.4609 61.8071 18.4609 c61.7715 18.5889 61.6797 18.7798 61.6016 18.9141 c61.8848 18.9072 62.1611 18.9004 62.3594 18.9004 c62.7983 18.9004 62.8193 18.9004 62.8193 19.042 c62.8193 20.564 L59.874 20.564 L59.874 21.0171 L62.8193 21.0171 L62.8193 21.6758 L63.0391 21.6611 L63.4214 21.8809 63.8252 22.1782 64.1367 22.4688 c61.2051 22.4688 L61.2051 22.9072 L64.6182 22.9072 L64.7031 22.9355 L65.0781 22.7021 L65.064 22.667 65.0146 22.6455 64.9717 22.6387 c64.5684 22.2275 63.9238 21.7324 63.3223 21.3926 c63.3223 21.0171 L66.2607 21.0171 lf60.6035 23.6934 m60.6035 22.4897 L60.1362 22.4897 L60.1362 24.1465 L62.8057 24.1465 L62.8057 25.0527 L63.4424 25.0103 L63.4355 24.9609 63.4004 24.9253 63.3008 24.9111 c63.3008 24.1465 L66.0195 24.1465 L66.0195 22.4897 L65.5381 22.4897 L65.5381 23.6934 L60.6035 23.6934 lf*U*u69.6084 24.8193 m69.5874 24.7627 69.5166 24.7061 69.3892 24.6987 c69.3398 24.3872 69.2759 24.019 69.2119 23.7432 c69.9063 23.7852 70.6777 23.9058 71.2939 24.0898 c71.3716 23.6084 L70.7129 23.4453 69.9346 23.332 69.1201 23.2686 c68.7803 21.9092 68.313 20.8047 67.6191 19.7852 c67.1445 19.9766 L67.7891 20.9038 68.2773 21.9658 68.582 23.2544 c67.1729 23.2544 L67.1729 23.7148 L68.0156 23.7148 L68.2354 23.7148 68.4619 23.7217 68.667 23.7217 c68.752 24.0967 68.8154 24.5005 68.8652 24.918 C69.6084 24.8193 lf71.4922 21.8027 m71.499 21.2295 71.5415 20.8398 71.584 20.3516 c72.0371 20.1748 72.625 19.8701 73.0918 19.5303 c72.8369 19.0771 L72.4478 19.3745 71.9663 19.6504 71.584 19.8203 c71.584 19.1123 71.3008 18.5605 70.2598 18.5605 c69.4741 18.5605 68.8721 18.9141 68.8794 19.5801 c68.8794 20.2881 69.623 20.6279 70.2744 20.6279 c70.5293 20.6279 70.791 20.5781 71.0742 20.5 c71.0459 20.9531 71.0107 21.4136 71.0107 21.7461 C71.4922 21.8027 lf1 D71.1025 20.0332 m70.8125 20.1465 70.5146 20.1958 70.2598 20.1958 c69.835 20.1958 69.3325 20.0259 69.3252 19.5869 c69.3252 19.1836 69.7217 18.9922 70.2744 18.9922 c70.7842 18.9922 71.1094 19.2402 71.1094 19.707 c71.1094 19.8203 71.1094 19.9268 71.1025 20.0332 cf0 D73.0425 22.5322 m72.2422 22.5254 71.2725 22.3975 70.5361 22.1855 c70.458 22.6313 L71.2656 22.8652 72.2422 23.0137 73.0142 23.0137 C73.0425 22.5322 lf*U*u79.4844 22.5107 m79.4707 22.5039 79.4492 22.5039 79.4277 22.5039 c79.3784 22.5039 79.3218 22.5181 79.2793 22.5464 c77.1768 21.9307 75.272 21.0029 75.2793 20.0542 c75.2793 19.3745 76.0293 19.1406 77.1768 19.1406 c78.3164 19.1406 79.1875 19.2256 79.6826 19.3037 c79.7256 18.7871 L79.0742 18.7021 78.019 18.6592 77.1904 18.6592 c75.7891 18.6592 74.7695 18.9854 74.7622 20.0259 c74.7549 20.7832 75.5127 21.4492 76.624 22.0225 c76.3838 22.4541 76.2988 23.2754 76.2988 24.876 c77.0771 24.812 L77.0703 24.7197 76.9995 24.6631 76.8579 24.6421 c76.8506 23.4033 76.8936 22.6313 77.0918 22.249 c77.7568 22.5605 78.5215 22.8438 79.3008 23.0986 C79.4844 22.5107 lf78.5781 24.7197 m78.9463 24.4014 79.2861 23.998 79.4775 23.665 c79.1729 23.46 L78.9893 23.7852 78.6631 24.2031 78.3022 24.5146 C78.5781 24.7197 lf79.5273 25.1235 m79.8955 24.7979 80.2139 24.4297 80.4121 24.0757 c80.1221 23.8774 L79.9238 24.2173 79.605 24.6064 79.2578 24.9111 C79.5273 25.1235 lf*U*u81.7422 18.8438 m81.5229 19.3535 81.438 20.4082 81.438 21.3359 c81.438 22.2773 81.5869 23.46 81.8203 24.6421 c82.5068 24.5078 L82.4932 24.4365 82.4219 24.3872 82.3232 24.3799 c82.0684 23.4102 81.9121 22.1499 81.9121 21.3286 c81.9121 20.7905 81.9194 20.2524 81.9761 19.9902 c82.1318 20.415 82.415 21.0947 82.5635 21.4277 c82.8823 21.1304 L82.6484 20.6489 82.1533 19.5728 82.1533 19.2402 c82.1533 19.1406 82.1743 19.0347 82.2236 18.9004 C81.7422 18.8438 lf83.541 23.0137 m84.1357 23.0068 84.7305 22.9995 85.3252 23.042 c85.2969 23.6509 85.2754 24.1748 85.2617 24.6987 c85.9766 24.6777 L85.9688 24.6064 85.9053 24.5498 85.792 24.5288 c85.7988 24.0757 85.8135 23.6152 85.8281 23.0771 c86.3867 23.1338 86.8398 23.2334 87.2148 23.3604 c87.2793 22.8652 L86.9395 22.7588 86.4512 22.6597 85.8486 22.6104 c85.877 21.8242 85.9121 20.9961 85.9336 20.543 c86.4717 20.3232 87.0098 19.9766 87.3779 19.6436 c87.1016 19.1904 L86.8115 19.4805 86.3945 19.792 85.9551 19.9976 c85.9482 19.3955 85.835 18.7231 84.7725 18.7231 c83.9443 18.7231 83.3921 19.1196 83.3921 19.7427 c83.3921 20.4648 84.1211 20.7832 84.7725 20.7832 c84.9922 20.7832 85.2256 20.7549 85.4453 20.6914 c85.4238 21.1377 85.3818 21.8809 85.3457 22.5747 c85.127 22.5605 84.8291 22.5537 84.624 22.5537 c83.5479 22.5537 L83.541 23.0137 lf1 D85.4805 20.2314 m85.2539 20.3018 85.0137 20.3584 84.7793 20.3584 c84.3477 20.3584 83.8311 20.2031 83.8311 19.7568 c83.8311 19.3604 84.2559 19.1621 84.7725 19.1621 c85.2969 19.1621 85.4883 19.417 85.4883 19.9834 C85.4805 20.2314 lf*U*u0 D93.7705 19.1763 m93.1475 19.063 92.3262 19.0137 91.6182 19.0137 c91.0234 19.0137 90.5068 19.0488 90.2305 19.1055 c89.374 19.2969 89.0059 19.835 89.0059 20.458 c89.0059 21.0029 89.3105 21.5479 89.7285 21.9727 c90.1387 21.7607 L89.7422 21.3496 89.5156 20.8965 89.5156 20.5 c89.5156 20.0898 89.792 19.7144 90.4004 19.5801 c90.6484 19.5234 91.0664 19.4951 91.5547 19.4951 c92.2412 19.4951 93.0625 19.5518 93.7354 19.686 C93.7705 19.1763 lf90.5918 22.752 m90.96 23.0352 91.4629 23.3818 91.8447 23.5732 c91.8447 23.5801 L91.3066 23.5166 90.0752 23.4883 89.2891 23.4951 c89.2891 23.6299 89.2891 23.8633 89.2822 23.9907 c89.4375 23.9834 92.1563 23.9414 93.3174 24.2173 c93.374 23.6934 L92.5313 23.5942 91.4482 22.8579 90.9951 22.4971 C90.5918 22.752 lf*U*u98.9102 23.7358 m98.8818 23.6719 98.8252 23.6226 98.7334 23.6226 c98.4785 21.4209 97.7422 19.502 96.5664 19.502 c95.9717 19.502 95.4336 20.0967 95.4336 21.2153 c95.4336 22.9146 96.7578 24.3379 98.6201 24.3379 c100.666 24.3379 101.5508 23.042 101.5508 21.6611 c101.5508 19.9766 100.5742 19.1621 98.8604 18.7656 c98.7969 18.8789 98.6768 19.0703 98.5635 19.1973 c100.1914 19.5088 101.0273 20.3018 101.0273 21.6401 c101.0273 22.8086 100.2764 23.8701 98.6201 23.8701 c98.5488 23.8701 98.4707 23.8633 98.4072 23.8564 C98.9102 23.7358 lf1 D98.2305 23.8281 m96.8008 23.6509 95.915 22.4688 95.915 21.2295 c95.915 20.4717 96.2412 19.9976 96.5811 19.9976 c97.4375 19.9976 98.0537 21.8877 98.2305 23.8281 cf*U*u0 D104.29 22.7373 m104.6162 22.2842 104.9561 21.6685 105.0762 21.272 c104.6934 21.0879 L104.6582 21.2153 104.6016 21.3569 104.5313 21.5127 c104.3184 21.4985 104.1064 21.4912 103.9004 21.4775 c103.9004 18.4473 L103.4766 18.4473 L103.4766 21.4561 L103.0801 21.4419 102.7256 21.4277 102.4424 21.4136 c102.4355 21.3643 102.3926 21.3359 102.3438 21.3213 c102.2158 21.8525 L102.7109 21.8525 L102.8672 22.0439 103.0303 22.2632 103.2002 22.5039 c102.9805 22.8296 102.6123 23.2471 102.2871 23.5518 c102.5342 23.8564 L102.6055 23.7925 102.6836 23.7217 102.7607 23.6436 c103.002 24.0547 103.2773 24.6211 103.4336 25.0244 c103.9365 24.812 L103.915 24.7695 103.8652 24.748 103.7871 24.748 c103.6035 24.3516 103.292 23.7715 103.0234 23.375 c103.1855 23.2051 103.334 23.0278 103.4473 22.8721 c103.752 23.332 104.0352 23.8135 104.2402 24.2173 c104.7363 23.9834 L104.7148 23.9482 104.6582 23.9199 104.5801 23.9199 c104.2197 23.3184 103.6533 22.4756 103.1572 21.8594 c104.3535 21.8809 L104.2266 22.1216 104.085 22.3691 103.9365 22.582 C104.29 22.7373 lf103.2002 20.8115 m103.1787 20.7695 103.1367 20.7412 103.0586 20.7412 c102.959 20.1392 102.7969 19.4595 102.584 19.042 c102.4844 19.1055 102.3291 19.1763 102.2305 19.2256 c102.4355 19.6221 102.584 20.3018 102.6758 20.9463 C103.2002 20.8115 lf104.5234 20.9531 m104.7295 20.5356 104.9277 19.9976 104.998 19.6367 c104.9131 19.6084 104.8281 19.5728 104.6016 19.502 c104.5449 19.8633 104.3535 20.415 104.1563 20.8398 C104.5234 20.9531 lf106.1807 21.123 m106.4492 21.0029 L106.4424 20.9746 106.4219 20.9531 106.4004 20.9395 c106.1455 19.8276 105.5996 19.084 104.8711 18.6807 c104.8066 18.7798 104.6582 18.9497 104.5664 19.0137 c105.1826 19.3252 105.6563 19.8843 105.8975 20.6914 c104.8711 20.6914 L104.8711 21.1021 L106.1025 21.1021 L106.1807 21.123 lf107.0586 21.7744 m107.0586 21.4561 107.3203 20.8472 107.4766 20.543 c107.8164 20.8115 108.1982 21.166 108.4316 21.4346 c108.7793 21.1729 108.8359 21.1377 108.8848 21.0947 c108.8643 21.0596 108.8008 21.0454 108.7295 21.0596 c108.4609 20.8188 108.0283 20.4648 107.6748 20.2168 c107.9785 19.7568 108.4043 19.3535 108.9844 19.0986 c108.8994 19.0063 108.7578 18.8223 108.6943 18.7021 c107.8652 19.1338 107.3633 19.856 107.0586 20.564 c107.0586 18.978 L107.0586 18.4966 106.8604 18.4541 105.9258 18.4541 c105.9121 18.5815 105.8477 18.7515 105.791 18.8789 c106.1309 18.8721 106.4219 18.8721 106.5059 18.8721 c106.5986 18.8789 106.6191 18.9004 106.6191 18.978 c106.6191 21.7744 L105.2031 21.7744 L105.2031 24.2813 L106.3359 24.2813 L106.457 24.5215 106.5771 24.8193 106.6484 25.0313 c107.2422 24.8828 L107.2285 24.8403 107.1787 24.812 107.1016 24.812 c107.0303 24.6631 106.9316 24.4648 106.8252 24.2813 c108.5742 24.2813 L108.5742 21.7744 L107.0586 21.7744 lf1 D105.6426 23.8848 m105.6426 23.2188 L108.1133 23.2188 L108.1133 23.8848 L105.6426 23.8848 lf105.6426 22.8438 m105.6426 22.1709 L108.1133 22.1709 L108.1133 22.8438 L105.6426 22.8438 lf*U*u0 D115.0439 19.084 m114.4355 19.5654 113.6641 20.0259 112.9199 20.2666 c112.9346 19.9902 112.8848 19.6294 112.8281 19.4453 c112.7715 18.8574 112.2266 18.6309 111.5752 18.6309 c110.6621 18.6309 109.9395 19.0771 109.9326 19.792 c109.918 20.5073 110.6689 20.9463 111.5605 20.9531 c111.8086 20.9531 112.127 20.9395 112.3887 20.8896 c112.3887 21.0811 112.3535 21.2437 112.3467 21.4063 c112.2832 22.334 112.2266 23.8208 112.2188 24.8403 c112.9551 24.7979 L112.9551 24.7271 112.8916 24.6631 112.7715 24.6494 c112.7646 24.458 112.7715 23.5234 112.7715 23.311 c113.2314 23.311 114.2656 23.3887 115.1221 23.5376 c115.1719 23.0352 L114.3643 22.9072 113.3164 22.8369 112.7783 22.8296 c112.7783 22.4258 112.793 22.2632 112.8984 20.7979 c113.8125 20.5283 114.6758 20.0469 115.3701 19.5371 C115.0439 19.084 lf1 D111.5469 20.5283 m110.8672 20.5146 110.3926 20.2314 110.3926 19.8276 c110.3926 19.3105 110.9521 19.084 111.5186 19.084 c112.0137 19.084 112.4248 19.2612 112.4248 19.7637 c112.4248 19.9268 112.4248 20.2168 112.4102 20.4224 c112.127 20.5073 111.8154 20.5283 111.5469 20.5283 cf*U*u0 D117.9609 20.8472 m117.8262 21.2295 117.7617 21.7817 117.7549 22.1782 c117.7549 22.8438 117.8262 23.6152 117.9961 24.5146 c118.7041 24.3945 L118.6758 24.3022 118.5908 24.2813 118.498 24.2739 c118.3574 23.6865 118.2578 22.7871 118.2578 22.2139 c118.2578 22.0576 118.2646 21.9307 118.2793 21.8311 c118.4209 22.1782 118.6826 22.6597 118.8311 22.9287 c118.8945 22.8369 119.0371 22.688 119.1074 22.6172 c118.584 21.6758 118.4277 21.4063 118.4277 21.1094 c118.4277 21.0527 118.4346 20.9961 118.4492 20.9321 C117.9609 20.8472 lf121.7559 24.6987 m121.748 24.6138 121.6914 24.5781 121.5713 24.543 c121.6211 23.9268 121.6914 22.9004 121.6914 22.0859 c121.6846 20.7197 121.1895 19.4878 119.0576 18.6025 c118.9805 18.7158 118.8105 18.9072 118.7041 19.0137 c120.6367 19.75 121.1533 20.918 121.1533 22.0791 c121.1533 22.9502 121.0684 23.9766 120.9902 24.7344 C121.7559 24.6987 lf*U*u129.7266 23.7925 m129.7266 19.0913 L129.7266 18.7588 129.6484 18.6025 129.4082 18.5176 c129.168 18.4399 128.7285 18.4326 128.084 18.4326 c128.0625 18.5742 127.9854 18.7871 127.9141 18.9214 c128.1758 18.9141 128.4316 18.9072 128.6367 18.9072 c129.2246 18.9072 129.252 18.9072 129.252 19.0913 c129.252 23.3252 L127.0361 23.3252 L127.0225 23.0352 126.9863 22.7305 126.916 22.4189 c127.6523 21.7744 128.5371 20.918 128.9834 20.373 c128.5938 20.0684 L128.2051 20.5566 127.4609 21.3286 126.7744 21.959 c126.5127 21.2437 125.9883 20.5356 124.9688 19.9409 c124.8984 20.0469 124.7422 20.2168 124.6289 20.3018 c126.2432 21.1729 126.5127 22.3691 126.5547 23.3252 c124.4521 23.3252 L124.4521 18.4326 L123.9775 18.4326 L123.9775 23.7925 L126.5625 23.7925 L126.5625 25.0313 L127.1855 24.9893 L127.1777 24.9395 127.1426 24.9043 127.043 24.8896 c127.043 23.7925 L129.7266 23.7925 lf*U*u131.4678 22.4614 m131.2344 22.0439 130.9863 21.6543 130.7246 21.3286 c130.6748 21.4419 130.5615 21.6826 130.4902 21.7891 c131.0996 22.5254 131.6875 23.7568 132.0488 24.9819 c132.6074 24.8047 L132.5859 24.7554 132.5371 24.7271 132.4453 24.7271 c132.2891 24.2529 132.1055 23.7783 131.8994 23.3252 c132.0625 23.2754 L132.0488 23.2261 132.0127 23.1978 131.9277 23.1836 c131.9277 18.4399 L131.4678 18.4399 L131.4678 22.4614 lf133.5918 19.7993 m133.5781 19.771 133.5283 19.75 133.4648 19.7427 c133.2949 19.3462 132.9189 18.8154 132.5791 18.4893 c132.502 18.5742 132.3389 18.7021 132.2324 18.7725 c132.5791 19.084 132.9473 19.6084 133.125 20.0049 C133.5918 19.7993 lf134.7676 24.5996 m134.7676 20.1748 L132.6992 20.1748 L132.6992 24.5996 L134.7676 24.5996 lf1 D134.335 23.2544 m134.335 24.1963 L133.1172 24.1963 L133.1172 23.2544 L134.335 23.2544 lf134.335 21.9233 m134.335 22.8721 L133.1172 22.8721 L133.1172 21.9233 L134.335 21.9233 lf134.335 20.5781 m134.335 21.541 L133.1172 21.541 L133.1172 20.5781 L134.335 20.5781 lf0 D134.5977 18.6382 m134.4844 18.9497 134.208 19.4521 133.9668 19.8276 c134.3213 20.0117 L134.5684 19.6436 134.8516 19.1621 134.9727 18.8647 C134.5977 18.6382 lf135.9355 24.2598 m135.9277 24.21 135.8857 24.1816 135.7939 24.168 c135.7939 20.0684 L135.3691 20.0684 L135.3691 24.2949 L135.9355 24.2598 lf136.5801 24.9326 m137.1533 24.897 L137.1465 24.8477 137.1104 24.812 137.0186 24.8047 c137.0186 19.0347 L137.0186 18.4683 136.7285 18.4399 135.7793 18.4399 c135.7578 18.5605 135.6943 18.7656 135.624 18.8931 c135.8145 18.8857 135.9922 18.8857 136.1338 18.8857 c136.5654 18.8857 136.5801 18.8857 136.5801 19.0273 C136.5801 24.9326 lf*U*u137.7324 21.6475 m138.0303 21.9307 138.7598 22.7021 139.1348 23.1055 c139.6797 23.7075 139.9492 23.8418 140.3027 23.8418 c140.7275 23.8418 141.0322 23.5732 141.6621 22.8223 c142.165 22.2139 143.3262 20.918 144.332 19.9976 c143.9561 19.5586 L142.9863 20.4365 141.832 21.7607 141.4072 22.2915 c140.8057 23.0278 140.5859 23.311 140.2959 23.311 c140.0127 23.311 139.793 23.0771 139.3613 22.5889 c139.1211 22.3125 138.5469 21.6826 138.2422 21.3428 c138.25 21.251 138.2217 21.1797 138.165 21.1445 C137.7324 21.6475 lf*UULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(\203f\203U\203C\203\223) Ln0 A1 Ap0 R0 1 0 0 K0 J 0 j 0.340157 w 10 M []0 d0 XR160.1572 -8.50391 m160.1572 -266.4561 L4.25195 -266.4561 L4.25195 -8.50391 L160.1572 -8.50391 L(s) */BBAccumRotation (1.570796) XTLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF