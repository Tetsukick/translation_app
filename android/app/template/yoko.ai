%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 18.1.1%%For: (mizo) ()%%Title: (yoko.ai)%%CreationDate: 2017/04/11 16:13%%Canvassize: 16383%%BoundingBox: 2 -165 271 57%%HiResBoundingBox: 2.63429 -164.5793 270.8784 56.3745%%DocumentProcessColors: Cyan Magenta Yellow%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 137.7517 -82.5 137.7517 -82.5%AI3_TileBox: -265.52 -361.7046 517.48 197.2954%AI3_DocumentPreview: None%AI5_ArtSize: 266.4567 164.4092%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI8_OpenToView: -164 71.6667 3 1832 936 18 1 0 82 132 0 0%AI5_OpenViewLayers: 73%%PageOrigin:-168.1597 -478.2598%AI7_GridSettings: 56.6929 10 56.6929 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 108 8%%BeginData: 6652 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFA93D14FFA9AFA9FF8585AFAFFFFF85AF85FF858BFFAF61FFAF85%85FFFF8BA9AFFFFFAF6185FF856185FD57FFAF1415A88B85AFA96160FF84%FFA9858485AFA9FFAF60AF84AFA961A98585FFFFAF85AF1485FFA984AFFD%57FF851B3DAFFF8BAF85148BAF8B85AF856160FF85AFA98BA9AFFFAFA9FF%A9AFFFAF85FFAF3D85FFA9AFFD57FFA9AFA8AFA9FFA8FFA9FFA8FFAFAFFF%FFA9FFFFFFA9FD05FFA8FFFFFFA8FFA9FFFFFFA9FFAFFFA9FDD7FFAFFDFC%FFFFFFFFA8FFFFCAA2CBFFCBA8FFA8CAA2FFCACBCACAA2FFFFFFA8CBA8FF%CAFFCACAA8CAA8FFCAFFA8CBA8CAA8FFFFFFCAFFCBCACAFD52FFA1CAC4FF%CACAFFC49BFD04CAFFCACACAFFC3FFFFFFCAFFFFFFCACA9BCBCBFF9BFFCA%CAC4CBFD04C4BDCACAFD50FFA9FFFFCAA2CACBC4A2FFA2C4CAFFC4CAFFFF%A2FFCACACBFFA2CAFFFFCACBCACAA8FFCACACACB9BCA9BCAA2C4A1CBC4CA%CAFD52FFCBCBCAFFCACBCAFFCBFD05FFCAFFFFFFCBFD07FFCAFD07FFCAFF%CBFD07FFCBFD50FFA9FFA8FDFCFFFFAFFFCAFD84FFA8FFAEAFAEFFAEAEA8%FFFFFFA8AE84FD04AEFFA8AEFFAE83AEAEA8AEFFAFAEA8FD05FFA8FFAEAE%AEAFA8AEFFFFA8FFAEFFA8FFA8AEFFAEA8AEFD3DFFA8FFCAFFFFFF5F8358%A8345FA8AE58A883AE5F83583458AE3483A85F58A8833434AE5883A8AE58%8483AE58FF8383AE8358A8343434A8FF5FA88483A8845F5883345F348359%AEFD40FFAE5EAE8383A8AEFF84FFAE835F835F5F83838334FF835FFFAE58%AEA8845EFF83AEFF83835FAEAEFFFF5EFF833B1118A88458FFAEAEA8AE83%AE5F5F5E5FA8FF83FD3AFFA9FFCAFFFFFFAE8383AEA8FFA8FF83AEA8AE83%A883AE83FF83A8A8A883AEA884FFFF8383A8AE83AEA8A883FFA8AEAEFFA8%AEA88383FF83A8A8FF83FFA8FFA8A883AE83FFFFFFAEFDB9FFA9FFA8FFFF%FFA8FDF9FFAFFFCAFFFFFFA8FD79FFAFAFCACAFFA8A8FD79FF14AF9BCAFF%A834FDFCFFFDFCFFFFA9AFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9%FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8%FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9%FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8%FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8AFFD7FFFAFAFFFCAFFCAFFCAFFCA%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCBFD82FFAF%A8FFCAFD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD%0CFFAEFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFF%AFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFF%AEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFF%AFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFFAEFFAFFF%AEFFFFFFAFA9FFCAFD82FFAEFD75FFAEFFCBFFAFA9FFA8FFFFFFA8FD73FF%A8FFFFFFCAFD06FFAEFD77FFCBFFAFAFFFCAFFFFFFAEFD73FFAEFFFFFFCB%FD06FFAEFD75FFAEFFFFFFAFA8FFCAFFFFFFAEFD73FFAEFD80FFAEFFFFFF%AFA9FFCAFD82FFAEFD75FFAEFFCBFFAFA9FFA8FFFFFFA8FD73FFA8FFFFFF%CAFD06FFAEFD77FFCBFFAFAFFFCAFFFFFFAEFD73FFAEFFFFFFCBFD06FFAE%FD75FFAEFFFFFFAFA8FFCAFFFFFFAEFD73FFAEFD80FFAEFFFFFFAFA9FFCA%FD82FFAEFD75FFAEFFCBFFAFA9FFA8FFFFFFA8FD73FFA8FFFFFFCAFD06FF%AEFD77FFCBFFAFAFFFCAFFFFFFAEFD73FFAEFFFFFFCBFD06FFAEFD75FFAE%FFFFFFAFA8FFCAFFFFFFAEFD73FFAEFD80FFAEFFFFFFAFA9FFCAFD82FFAE%FD75FFAEFFCBFFAFA9FFA8FFFFFFA8FD73FFA8FFFFFFCAFD06FFAEFD77FF%CBFFAFAFFFCAFFFFFFAEFD73FFAEFFFFFFCBFD06FFAEFD75FFAEFFFFFFAF%A8FFCAFFFFFFAEFD73FFAEFD80FFAEFFFFFFAFA9FFCAFD82FFAEFD75FFAE%FFCBFFAFA9FFA8FFFFFFA8FD73FFA8FFFFFFCAFD06FFAEFD77FFCBFFAFAF%FFCAFFFFFFAEFD73FFAEFFFFFFCBFD06FFAEFD75FFAEFFFFFFAFA8FFCAFF%FFFFAEFD73FFAEFD80FFAEFFFFFFAFA9FFCAFD82FFAEFD75FFAEFFCBFFAF%A9FFA8FFFFFFA8FD73FFA8FFFFFFCAFD06FFAEFD77FFCBFFAFAFFFCAFFFF%FFAEFD73FFAEFFFFFFCBFD06FFAEFD75FFAEFFFFFFAFA8FFCAFFFFFFAEFD%73FFAEFD80FFAEFFFFFFAFA9FFCAFD82FFAEFD75FFAEFFCBFFAFA9FFA8FF%FFFFA8FD73FFA8FFFFFFCAFD06FFAEFD77FFCBFFAFAFFFCAFFFFFFAEFD73%FFAEFFFFFFCBFD06FFAEFD75FFAEFFFFFFAFA8FFCAFFFFFFAEFD73FFAEFD%80FFAEFFFFFFAFA9FFCAFD82FFAEFD75FFAEFFCBFFAFA9FFA8FFFFFFA8FD%73FFA8FFFFFFCAFD06FFAEFD77FFCBFFAFAFFFCAFFFFFFAEFD73FFAEFFFF%FFCBFD06FFAEFD75FFAEFFFFFFAFA8FFCAFFFFFFAEFD73FFAEFD80FFAEFF%FFFFAFA9FFCAFD82FFAEFD75FFAEFFCBFFAFA9FFA8FFFFFFA8FD73FFA8FF%FFFFCAFD06FFAEFD77FFCBFFAFAFFFCAFD7BFFCBFD08FFAEFFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAE%FFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFAEFFFFFFAFA8FFCAFD05FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD84FFCBFFAFA9%FFFFFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCB%FFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCA%FFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCB%FFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCA%FFCBFFCAFD04FFAFFD7DFFAFAFFFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF%A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF%A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF%A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF%A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe \203J\203\212\203O\203\211\203t\203B\203u\203\211\203V\203v\203\211\203O\203C\203\223) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Vectorized Object) (\203g\203\214\201[\203X\211\346\221\234) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Line Plugin Group) (Line artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Sketch Plugin Group) (Sketch artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe \203u\203\214\203\223\203h\203v\203\211\203O\203C\203\223) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe \203V\203\223\203{\203\213) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe \203G\203\223\203x\203\215\201[\203v\203v\203\211\203O\203C\203\223) (Deform.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe \203\211\203C\203u\203y\203C\203\223\203g\203v\203\211\203O\203C\203\223) (PlanetX.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613)(\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613) 0 7 Bd[0.1<B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89888786858483828180>0.801 %_Br<403F3E3D3D3C3B3A3A393837373635343433323130302F2E2D2D2C2B2A2A292827272625242323222120201F1E1D1D1C1B1A1A><D9D8D7D6D6D5D4D3D3D2D1D0D0CFCECDCDCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C0C0BFBEBDBCBCBBBAB9B9B8B7B6B6B5B4B3B3><999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC><19191818171716161515141413131212111110100F0F0E0E0D0D0C0C0B0B0A0A09090808070706060505040403030202010100>1 %_Br<191A1A1B1B1C1C1D1D1D1E1E1F1F2020202121222223232324242525262626272728282929292A2A2B2B2C2C2C2D2D2E2E2F2F2F30303131323232333334343535353636373738383839393A3A3B3B3B3C3C3D3D3E3E3E3F3F40><808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9><CCCBCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B7B7B6B6B5B5B4B3B3B2B2B1B0B0AFAFAEAEADACACABABAAAAA9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A0A09F9F9E9E9D9C9C9B9B9A9A99><000001010101020202030303030404040505050506060607070707080808090909090A0A0A0B0B0B0B0C0C0C0D0D0D0D0E0E0E0F0F0F0F101010111111111212121313131314141415151515161616171717171818181919191A>1 %_Br<807F7E7E7D7D7C7B7B7A7A79797877777676757574737372727171706F6F6E6E6D6D6C6B6B6A6A69696867676666656564636362626161605F5F5E5E5D5D5C5B5B5A5A59595857575656555554535352525151504F4F4E4E4D4C4C4B4B4A4A49484847474646454444434342424140403F3F3E3E3D3C3C3B3B3A3A39383837373636353434333332323130302F2F2E2E2D2C2C2B2B2A2A29282827272626252424232322222120201F1F1E1E1D1C1C1B1B1A19><E6E5E4E4E3E3E2E1E1E0E0DFDFDEDDDDDCDCDBDBDAD9D9D8D8D7D7D6D5D5D4D4D3D3D2D1D1D0D0CFCFCECDCDCCCCCBCBCAC9C9C8C8C7C7C6C5C5C4C4C3C3C2C1C1C0C0BFBFBEBDBDBCBCBBBBBAB9B9B8B8B7B7B6B5B5B4B4B3B2B2B1B1B0B0AFAEAEADADACACABAAAAA9A9A8A8A7A6A6A5A5A4A4A3A2A2A1A1A0A09F9E9E9D9D9C9C9B9A9A9999989897969695959494939292919190908F8E8E8D8D8C8C8B8A8A89898888878686858584848382828181807F><191B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC>01 %_Br<191A1B1B1C1C1D1E1E1F1F20202122222323242425262627272828292A2A2B2B2C2C2D2E2E2F2F30303132323333343435363637373838393A3A3B3B3C3C3D3E3E3F3F40404142424343444445464647474848494A4A4B4B4C4D4D4E4E4F4F50515152525353545555565657575859595A5A5B5B5C5D5D5E5E5F5F60616162626363646565666667676869696A6A6B6B6C6D6D6E6E6F6F70717172727373747575767677777879797A7A7B7B7C7D7D7E7E7F80><8080818182828384848585868687888889898A8A8B8C8C8D8D8E8E8F9090919192929394949595969697989899999A9A9B9C9C9D9D9E9E9FA0A0A1A1A2A2A3A4A4A5A5A6A6A7A8A8A9A9AAAAABACACADADAEAEAFB0B0B1B1B2B3B3B4B4B5B5B6B7B7B8B8B9B9BABBBBBCBCBDBDBEBFBFC0C0C1C1C2C3C3C4C4C5C5C6C7C7C8C8C9C9CACBCBCCCCCDCDCECFCFD0D0D1D1D2D3D3D4D4D5D5D6D7D7D8D8D9D9DADBDBDCDCDDDDDEDFDFE0E0E1E1E2E3E3E4E4E5E6><CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B19>01 %_Br0.1<B3B1B1B0AFAEADACABAAA9A8A7A6A5A5A4A3A2A1A0A09F9E9D9D9C9B9A9A999898979696959494939292919190908F8F8E8E8D8D8C8C8B8B8A8A8989888888878787868686858585848484838383838382828282818181818181818080808080808080808080808080808080>0.801 %_Br[0.1 0.5 0.8 0 1 50 100 %_BS%_0.1 0.5 0.8 0 1 50 100 Bs0.1 0.7 0.8 0 1 50 90 %_BS%_0.1 0.7 0.8 0 1 50 90 Bs0.25 0.85 0.6 0.1 1 50 79 %_BS%_0.25 0.85 0.6 0.1 1 50 79 Bs0.1 0.5 0.8 0 1 50 64 %_BS%_0.1 0.5 0.8 0 1 50 64 Bs0.5 0.9 0.1 0 1 50 47 %_BS%_0.5 0.9 0.1 0 1 50 47 Bs0.1 0.5 0.8 0 1 50 30 %_BS%_0.1 0.5 0.8 0 1 50 30 Bs0.1 0.7 0.8 0 1 28 0 %_BS%_0.1 0.7 0.8 0 1 28 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\))(\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\)) 1 2 Bd[<000001010101020202030303030404040505050506060607070707080808090909090A0A0A0A0B0B0B0B0C0C0C0D0D0D0D0E0E0E0E0F0F0F0F1010101011111111121212121313131314141414151515151616161616171717171818181819191919191A1A1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F2020202020212121212122222222222323232323242424242424252525252526262626262627272727272828282828282929292929292A2A2A2A2A2A2B2B2B2B2B2B2C2C2C2C2C2C2D2D2D2D2D2D2E2E2E2E2E2E2E2F2F2F2F2F2F2F3030303030303031313131313131323232323232323233333333333333333434343434343434353535353535353535363636363636363636373737373737373737383838383838383838383839393939393939393939393A3A3A3A3A3A3A3A3A3A3A3A3B3B3B3B3B3B3B3B3B3B3B3B3B3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4040404040404040404040404040404040404040404040404040404040404040FF><000102030405060708090A0B0C0D0E0F10111213141515161718191A1B1C1D1E1F20212223232425262728292A2B2C2C2D2E2F30313233333435363738393A3A3B3C3D3E3F3F4041424344444546474848494A4B4C4C4D4E4F505051525354545556575758595A5A5B5C5D5D5E5F60606162636364656666676868696A6A6B6C6D6D6E6F6F7071717273737475757677777879797A7B7B7C7D7D7E7F7F808081828283848485858687878888898A8A8B8B8C8C8D8E8E8F8F9090919292939394949595969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9AAAAABABACACACADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B8B9B9BABABABBBBBBBCBCBCBDBDBDBEBEBEBFBFBFC0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C5C6C6C6C7C7C7C7C8C8C8C8C9C9C9C9CACACACACBCBCBCBCCCCCCCCCCCDCDCDCDCECECECECECFCFCFCFCFD0D0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D2D2D3D3D3D3D3D3D4D4D4D4D4D4D4D4D5D5D5D5D5D5D5D5D6D6D6D6D6D6D6D6D6D6D7D7D7D7D7D7D7D7D7D7D7D7D7D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D8D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9FF><00010102030404050606070808090A0A0B0C0C0D0E0E0F1010111212131414151616171818191A1A1B1C1C1D1D1E1F1F202121222223242425262627272829292A2A2B2C2C2D2D2E2F2F3030313132333334343535363737383839393A3A3B3C3C3D3D3E3E3F3F404041414243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F505051515152525353545455555656575758585859595A5A5B5B5C5C5C5D5D5E5E5F5F5F606061616162626363646464656566666667676868686969696A6A6B6B6B6C6C6C6D6D6E6E6E6F6F6F7070707171727272737373747474757575767676777777777878787979797A7A7A7B7B7B7C7C7C7C7D7D7D7E7E7E7E7F7F7F80808080818181818282828283838383848484848585858586868686878787878888888888898989898A8A8A8A8A8B8B8B8B8B8C8C8C8C8C8D8D8D8D8D8D8E8E8E8E8E8F8F8F8F8F8F9090909090909091919191919192929292929292939393939393939394949494949494949495959595959595959596969696969696969696969697979797979797979797979797979898989898989898989898989898989898989898999999999999999999999999999999999999999999999999999999999999FF><000000000001010101010101010202020202020202020303030303030303030404040404040404040405050505050505050506060606060606060606070707070707070707070808080808080808080809090909090909090909090A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101010101111111111111111111111111111111212121212121212121212121212121213131313131313131313131313131313131314141414141414141414141414141414141414151515151515151515151515151515151515151515161616161616161616161616161616161616161616161616171717171717171717171717171717171717171717171717171717171718181818181818181818181818181818181818181818181818181818181818181818181818181919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919FF>1 %_Br[0 0 0 0 1 28 48.538 %_BS%_0 0 0 0 1 28 48.538 Bs0.25 0.85 0.6 0.1 1 50 100 %_BS%_0.25 0.85 0.6 0.1 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)(\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 1 3 Bd[0.20.20.211 %_Br0.20.20.211 %_Br[0.2 0.2 0.2 1 1 68.3944 73.8792 %_BS%_0.2 0.2 0.2 1 1 68.3944 73.8792 Bs0.2 0.2 0.2 1 1 31.8603 88.7329 %_BS%_0.2 0.2 0.2 1 1 31.8603 88.7329 Bs0.2 0.2 0.2 1 1 50 100 %_BS%_0.2 0.2 0.2 1 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1)(\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1) 0 2 Bd[00 %_Br[0 0 0 1 1 50 100 %_BS%_0 0 0 1 1 50 100 Bs0 0 0 1 1 25 0 %_BS%_0 0 0 1 1 25 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h)(\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h) 0 0 54.7383 54.7393 [%AI3_Tile(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 0 m5.8643 0.9766 L2.9316 0.9766 L2.9316 0 L5.8643 0 Lf0 5.8652 m0.9766 5.8652 L0.9766 2.9316 L0 2.9316 L0 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 0.9766 m2.9316 2.9316 L0.9766 2.9316 L0.9766 0.9766 L2.9316 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 2.9316 m5.8643 5.8652 L2.9316 5.8652 L2.9316 2.9316 L5.8643 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0.9766 0 m0.9766 0.9766 L0 0.9766 L0 0 L0.9766 0 Lf27.3682 0 m27.3682 0.9766 L20.5254 0.9766 L20.5254 0 L27.3682 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 2.9316 m27.3682 5.8652 L20.5254 5.8652 L20.5254 2.9316 L27.3682 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 9.7734 m27.3682 14.6611 L20.5254 14.6611 L20.5254 9.7734 L27.3682 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 5.8652 m20.5254 9.7734 L14.6602 9.7734 L14.6602 5.8652 L20.5254 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 0.9766 m9.7734 2.9316 L5.8643 2.9316 L5.8643 0.9766 L9.7734 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 2.9316 m14.6602 5.8652 L9.7734 5.8652 L9.7734 2.9316 L14.6602 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 0 m14.6602 0.9766 L9.7734 0.9766 L9.7734 0 L14.6602 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 0.9766 m20.5254 2.9316 L14.6602 2.9316 L14.6602 0.9766 L20.5254 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 27.3691 m0.9766 27.3691 L0.9766 20.5264 L0 20.5264 L0 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 27.3691 m5.8643 27.3691 L5.8643 20.5264 L2.9316 20.5264 L2.9316 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 27.3691 m14.6602 27.3691 L14.6602 20.5264 L9.7734 20.5264 L9.7734 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 20.5264 m9.7734 20.5264 L9.7734 14.6611 L5.8643 14.6611 L5.8643 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0.9766 9.7734 m2.9316 9.7734 L2.9316 5.8652 L0.9766 5.8652 L0.9766 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 14.6611 m5.8643 14.6611 L5.8643 9.7734 L2.9316 9.7734 L2.9316 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 14.6611 m0.9766 14.6611 L0.9766 9.7734 L0 9.7734 L0 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0.9766 20.5264 m2.9316 20.5264 L2.9316 14.6611 L0.9766 14.6611 L0.9766 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 14.6611 m20.5254 20.5264 L14.6602 20.5264 L14.6602 14.6611 L20.5254 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 5.8652 m9.7734 9.7734 L5.8643 9.7734 L5.8643 5.8652 L9.7734 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 9.7734 m14.6602 14.6611 L9.7734 14.6611 L9.7734 9.7734 L14.6602 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1252 0.13 0 0.0576 k 0.1252 0.13 0 0.0576 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 20.5264 m27.3682 27.3691 L20.5254 27.3691 L20.5254 20.5264 L27.3682 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 54.7393 m48.873 53.7627 L51.8066 53.7627 L51.8066 54.7393 L48.873 54.7393 Lf54.7383 48.874 m53.7617 48.874 L53.7617 51.8076 L54.7383 51.8076 L54.7383 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 53.7627 m51.8066 51.8076 L53.7617 51.8076 L53.7617 53.7627 L51.8066 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 51.8076 m48.873 48.874 L51.8066 48.874 L51.8066 51.8076 L48.873 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR53.7617 54.7393 m53.7617 53.7627 L54.7383 53.7627 L54.7383 54.7393 L53.7617 54.7393 Lf27.3682 54.7393 m27.3682 53.7627 L34.2109 53.7627 L34.2109 54.7393 L27.3682 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 51.8076 m27.3682 48.874 L34.2109 48.874 L34.2109 51.8076 L27.3682 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 44.9639 m27.3682 40.0762 L34.2109 40.0762 L34.2109 44.9639 L27.3682 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 48.874 m34.2109 44.9639 L40.0752 44.9639 L40.0752 48.874 L34.2109 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 53.7627 m44.9639 51.8076 L48.873 51.8076 L48.873 53.7627 L44.9639 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 51.8076 m40.0752 48.874 L44.9639 48.874 L44.9639 51.8076 L40.0752 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 54.7393 m40.0752 53.7627 L44.9639 53.7627 L44.9639 54.7393 L40.0752 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 53.7627 m34.2109 51.8076 L40.0752 51.8076 L40.0752 53.7627 L34.2109 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 27.3691 m53.7617 27.3691 L53.7617 34.2109 L54.7383 34.2109 L54.7383 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 27.3691 m48.873 27.3691 L48.873 34.2109 L51.8066 34.2109 L51.8066 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 27.3691 m40.0752 27.3691 L40.0752 34.2109 L44.9639 34.2109 L44.9639 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 34.2109 m44.9639 34.2109 L44.9639 40.0762 L48.873 40.0762 L48.873 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR53.7617 44.9639 m51.8066 44.9639 L51.8066 48.874 L53.7617 48.874 L53.7617 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 40.0762 m48.873 40.0762 L48.873 44.9639 L51.8066 44.9639 L51.8066 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 40.0762 m53.7617 40.0762 L53.7617 44.9639 L54.7383 44.9639 L54.7383 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR53.7617 34.2109 m51.8066 34.2109 L51.8066 40.0762 L53.7617 40.0762 L53.7617 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 40.0762 m34.2109 34.2109 L40.0752 34.2109 L40.0752 40.0762 L34.2109 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 48.874 m44.9639 44.9639 L48.873 44.9639 L48.873 48.874 L44.9639 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 44.9639 m40.0752 40.0762 L44.9639 40.0762 L44.9639 44.9639 L40.0752 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1252 0.13 0 0.0576 k 0.1252 0.13 0 0.0576 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 34.2109 m27.3682 27.3691 L34.2109 27.3691 L34.2109 34.2109 L27.3682 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 54.7393 m2.9316 53.7627 L0.9766 53.7627 L0.9766 54.7393 L2.9316 54.7393 Lf0 51.8076 m0 53.7627 L0.9766 53.7627 L0.9766 51.8076 L0 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 48.874 m2.9316 51.8076 L0.9766 51.8076 L0.9766 48.874 L2.9316 48.874 Lf5.8643 53.7627 m5.8643 51.8076 L2.9316 51.8076 L2.9316 53.7627 L5.8643 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 54.7393 m9.7734 53.7627 L5.8643 53.7627 L5.8643 54.7393 L9.7734 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 51.8076 m14.6602 53.7627 L9.7734 53.7627 L9.7734 51.8076 L14.6602 51.8076 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 48.874 m20.5254 51.8076 L14.6602 51.8076 L14.6602 48.874 L20.5254 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 44.9639 m27.3682 48.874 L20.5254 48.874 L20.5254 44.9639 L27.3682 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 53.7627 m27.3682 51.8076 L20.5254 51.8076 L20.5254 53.7627 L27.3682 53.7627 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 54.7393 m14.6602 53.7627 L20.5254 53.7627 L20.5254 54.7393 L14.6602 54.7393 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 48.874 m9.7734 51.8076 L5.8643 51.8076 L5.8643 48.874 L9.7734 48.874 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 44.9639 m14.6602 48.874 L9.7734 48.874 L9.7734 44.9639 L14.6602 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 40.0762 m20.5254 44.9639 L14.6602 44.9639 L14.6602 40.0762 L20.5254 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 34.2109 m27.3682 40.0762 L20.5254 40.0762 L20.5254 34.2109 L27.3682 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 44.9639 m0 48.874 L0.9766 48.874 L0.9766 44.9639 L0 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 44.9639 m5.8643 48.874 L2.9316 48.874 L2.9316 44.9639 L5.8643 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 40.0762 m9.7734 44.9639 L5.8643 44.9639 L5.8643 40.0762 L9.7734 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 44.9639 m2.9316 40.0762 L0.9766 40.0762 L0.9766 44.9639 L2.9316 44.9639 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 34.2109 m0 40.0762 L0.9766 40.0762 L0.9766 34.2109 L0 34.2109 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR2.9316 27.3691 m2.9316 34.2109 L0.9766 34.2109 L0.9766 27.3691 L2.9316 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR5.8643 40.0762 m5.8643 34.2109 L2.9316 34.2109 L2.9316 40.0762 L5.8643 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR9.7734 27.3691 m9.7734 34.2109 L5.8643 34.2109 L5.8643 27.3691 L9.7734 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR14.6602 40.0762 m14.6602 34.2109 L9.7734 34.2109 L9.7734 40.0762 L14.6602 40.0762 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR20.5254 27.3691 m20.5254 34.2109 L14.6602 34.2109 L14.6602 27.3691 L20.5254 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 0 m51.8066 0.9766 L53.7617 0.9766 L53.7617 0 L51.8066 0 Lf54.7383 2.9316 m54.7383 0.9766 L53.7617 0.9766 L53.7617 2.9316 L54.7383 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 5.8652 m51.8066 2.9316 L53.7617 2.9316 L53.7617 5.8652 L51.8066 5.8652 Lf48.873 0.9766 m48.873 2.9316 L51.8066 2.9316 L51.8066 0.9766 L48.873 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 0 m44.9639 0.9766 L48.873 0.9766 L48.873 0 L44.9639 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 2.9316 m40.0752 0.9766 L44.9639 0.9766 L44.9639 2.9316 L40.0752 2.9316 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 5.8652 m34.2109 2.9316 L40.0752 2.9316 L40.0752 5.8652 L34.2109 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 9.7734 m27.3682 5.8652 L34.2109 5.8652 L34.2109 9.7734 L27.3682 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 0.9766 m27.3682 2.9316 L34.2109 2.9316 L34.2109 0.9766 L27.3682 0.9766 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 0 m40.0752 0.9766 L34.2109 0.9766 L34.2109 0 L40.0752 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 5.8652 m44.9639 2.9316 L48.873 2.9316 L48.873 5.8652 L44.9639 5.8652 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 9.7734 m40.0752 5.8652 L44.9639 5.8652 L44.9639 9.7734 L40.0752 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 14.6611 m34.2109 9.7734 L40.0752 9.7734 L40.0752 14.6611 L34.2109 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR27.3682 20.5264 m27.3682 14.6611 L34.2109 14.6611 L34.2109 20.5264 L27.3682 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 9.7734 m54.7383 5.8652 L53.7617 5.8652 L53.7617 9.7734 L54.7383 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 9.7734 m48.873 5.8652 L51.8066 5.8652 L51.8066 9.7734 L48.873 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 14.6611 m44.9639 9.7734 L48.873 9.7734 L48.873 14.6611 L44.9639 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 9.7734 m51.8066 14.6611 L53.7617 14.6611 L53.7617 9.7734 L51.8066 9.7734 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 1 0 0.46 k 1 1 0 0.46 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR54.7383 20.5264 m54.7383 14.6611 L53.7617 14.6611 L53.7617 20.5264 L54.7383 20.5264 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8261 0.8261 0 0.38 k 0.8261 0.8261 0 0.38 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR51.8066 27.3691 m51.8066 20.5264 L53.7617 20.5264 L53.7617 27.3691 L51.8066 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.6791 0.6905 0 0.3124 k 0.6791 0.6905 0 0.3124 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR48.873 14.6611 m48.873 20.5264 L51.8066 20.5264 L51.8066 14.6611 L48.873 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4654 0.46 0 0.214 k 0.4654 0.46 0 0.214 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR44.9639 27.3691 m44.9639 20.5264 L48.873 20.5264 L48.873 27.3691 L44.9639 27.3691 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.2793 0.2761 0 0.1285 k 0.2793 0.2761 0 0.1285 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR40.0752 14.6611 m40.0752 20.5264 L44.9639 20.5264 L44.9639 14.6611 L40.0752 14.6611 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1926 0.1904 0 0.0886 k 0.1926 0.1904 0 0.0886 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.2109 27.3691 m34.2109 20.5264 L40.0752 20.5264 L40.0752 27.3691 L34.2109 27.3691 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 40)0 Au0 J 0 j 1 w 4 M []0 d0 XR-8050.6118 8107.3359 m-7658.8506 8107.3359 L-7658.8506 8015.6479 L-8050.6118 8015.6479 L-8050.6118 8107.3359 Ln0 O0 0 0 1 k1 XR-7663.5132 8049.6597 m-7665.2715 8049.6597 -7784.9414 8051.8325 -7860.8115 8053.2119 C-7881.6265 8052.2749 -7902.4126 8050.9624 -7923.2144 8049.2422 C-7925.6924 8048.8911 -7928.5068 8048.5352 -7930.0181 8048.3408 c-7930.8711 8048.2261 -7931.7329 8048.1255 -7932.5972 8048.0332 C-7932.1426 8047.8008 -7931.6997 8047.54 -7931.2764 8047.2344 C-7930.4097 8046.4727 -7929.5552 8045.5728 -7929.0332 8044.1943 C-7929.0576 8043.9087 -7928.8594 8043.5591 -7928.8125 8043.2695 c-7928.7129 8042.6519 -7928.7979 8041.9023 -7928.8916 8041.3677 c-7928.9536 8041.0127 -7929.1147 8040.7656 -7929.1855 8040.4717 c-7929.2085 8040.375 -7929.1382 8040.3159 -7929.1655 8040.2422 c-7929.2993 8039.8887 -7929.6909 8039.2925 -7929.9136 8038.9663 c-7930.0176 8038.8159 -7930.1475 8038.7173 -7930.2632 8038.5591 c-7930.2793 8038.5366 -7930.2266 8038.4751 -7930.2524 8038.4463 c-7930.8081 8037.8062 -7931.5908 8037.2813 -7932.5552 8036.8159 c-7932.6143 8036.791 -7932.6235 8036.8848 -7932.6963 8036.8271 C-7932.9814 8036.7056 -7933.2739 8036.5933 -7933.5542 8036.5317 c-7935.0562 8036.2031 -7936.8765 8036.5879 -7937.9624 8037.3735 c-7938.9595 8038.0957 -7939.6904 8039.6021 -7939.6274 8040.8145 c-7939.5723 8041.8496 -7938.8262 8042.9976 -7937.6055 8043.7749 c-7936.52 8044.4688 -7935.2075 8044.7231 -7934.3975 8044.0991 C-7934.8096 8043.9692 -7935.1284 8043.7734 -7935.2407 8043.4927 C-7935.2505 8043.2168 -7935.2563 8042.9395 -7935.0352 8042.5991 C-7934.6113 8042.2261 -7933.9521 8041.9888 -7933.2832 8042.4556 c-7932.3442 8043.1104 -7932.2324 8044.5288 -7933.1938 8045.2759 C-7933.4683 8045.3804 -7933.7183 8045.6191 -7933.9097 8045.7231 c-7934.3423 8045.9595 -7934.7183 8046.1255 -7935.1348 8046.2837 c-7936.2534 8046.6997 -7937.6436 8047.1582 -7938.6924 8047.3359 c-7938.8711 8047.3687 -7939.0586 8047.3877 -7939.2402 8047.4136 C-7942.5635 8047.1191 -7945.6997 8046.8096 -7948.3013 8046.2661 C-7948.2734 8046.2632 -7948.2505 8046.2646 -7948.2183 8046.2607 c-7947.3975 8046.1597 -7946.7905 8045.9927 -7946.0645 8045.752 c-7945.7925 8045.6636 -7945.4785 8045.6519 -7945.2422 8045.5552 c-7945.1582 8045.5254 -7945.1006 8045.3999 -7945.0068 8045.3535 c-7944.6968 8045.2007 -7944.3726 8045.1064 -7944.0596 8044.8999 c-7943.0693 8044.2456 -7942.0371 8043.0757 -7941.9214 8041.6079 C-7942.1064 8040.5664 -7942.5239 8039.5928 -7943.7534 8038.8184 c-7943.8813 8038.7349 -7944.0259 8038.6997 -7944.1592 8038.623 C-7946.0112 8037.9575 -7947.7515 8039.0527 -7947.9663 8040.9463 C-7947.8716 8041.1157 -7947.8096 8041.2935 -7947.8213 8041.4927 C-7947.4536 8042.1895 -7946.0635 8042.7959 -7945.4653 8042.3545 C-7945.7729 8042.2959 -7945.9092 8042.2656 -7946.0234 8042.0039 C-7946.0488 8041.3472 -7945.2275 8041.1733 -7944.8125 8041.7573 C-7944.6563 8042.4424 -7944.9272 8042.9927 -7945.4536 8043.5503 c-7945.6665 8043.7749 -7945.9434 8043.9087 -7946.2163 8044.0942 c-7946.5796 8044.3413 -7946.9092 8044.623 -7947.2715 8044.7734 c-7947.5981 8044.9087 -7947.9712 8044.9414 -7948.3042 8045.0288 c-7948.3945 8045.0503 -7948.4565 8045.1016 -7948.5303 8045.1191 c-7948.7871 8045.1733 -7948.9956 8045.2544 -7949.2476 8045.2871 c-7949.5806 8045.3247 -7949.9336 8045.2886 -7950.3125 8045.3247 c-7950.4995 8045.3452 -7950.6792 8045.4341 -7950.8745 8045.4512 c-7951.0015 8045.4604 -7951.1318 8045.4604 -7951.2622 8045.4624 C-7953.9731 8044.5615 -7956.2554 8043.3496 -7958.1411 8041.0181 c-7961.8301 8036.4624 -7956.2012 8032.2959 -7955.1499 8036.3359 C-7957.1265 8037.7749 -7960.7471 8040.8599 -7953.0488 8040.9868 C-7944.7642 8039.4951 -7951.8579 8024.2319 -7961.8105 8028.2974 c-7970.1748 8031.7144 -7966.2925 8040.3784 -7960.6255 8044.0332 c-7952.1499 8049.4956 -7942.6973 8050.2319 -7932.8608 8050.3247 C-7943.5459 8054.7886 -7958.0845 8052.1431 -7966.1494 8044.1206 c-7970.2607 8040.0332 -7974.2031 8033.7314 -7972.9795 8027.6294 c-7971.7339 8021.4214 -7965.3213 8027.1631 -7970.2554 8027.1821 C-7970.0493 8032.7456 -7956.7983 8026.7046 -7963.0903 8018.5669 c-7968.7607 8011.2319 -7978.7295 8019.2622 -7980.4839 8025.6885 c-7986.1836 8046.5757 -7956.5142 8052.4517 -7942.5415 8053.1631 C-7954.2739 8056.5151 -7970.5488 8054.0127 -7981.7144 8049.5254 c-7986.1265 8047.7495 -7991.1304 8044.6328 -7993.7075 8040.5176 c-7997.6216 8034.2661 -7990.5864 8030.0239 -7990.0552 8032.1431 c-7989.6294 8033.8359 -7995.5361 8034.3638 -7990.9863 8037.4395 c-7986.9688 8040.1582 -7983.4355 8033.9487 -7982.6216 8030.8184 c-7978.8379 8016.2725 -8000.2197 8018.2007 -8002.5264 8031.9385 c-8007.6699 8062.5669 -7961.4668 8056.1973 -7945.6499 8055.3335 C-7945.8721 8055.5015 -7946.0928 8055.6592 -7946.3145 8055.8223 C-7951.5942 8057.3247 -7956.8013 8059.5264 -7961.6196 8062.2871 C-7976.1143 8064.0215 -7988.9092 8053.6304 -8004.7515 8048.3555 c-8013.7231 8045.3687 -8024.2529 8049.6685 -8032.4375 8045.0542 c-8036.7832 8042.5942 -8039.8579 8040.0054 -8041.4556 8034.7925 C-8043.0688 8025.8501 -8033.4575 8024.7119 -8035.2993 8029.3813 C-8037.0024 8029.7095 -8036.3369 8028.5742 -8037.4951 8028.5815 C-8041.4458 8032.2876 -8033.1841 8037.4717 -8029.3203 8034.1719 c-8022.6094 8028.4429 -8027.4165 8020.0728 -8034.2461 8017.7959 C-8052.73 8017.9902 -8053.1597 8040.6016 -8047.2075 8053.0991 c-8031.3813 8086.3247 -7997.3042 8074.3228 -7969.6973 8067.2876 C-7973.4414 8069.8135 -7976.0571 8073.3823 -7978.7344 8076.9551 c-7983.3794 8083.1567 -7985.8291 8092.5942 -7977.1621 8096.6016 C-7976.3213 8100.7231 -7974.7988 8104.6255 -7970.7266 8106.5093 c-7965.9067 8108.7397 -7961.0054 8106.2983 -7959.7104 8101.1909 C-7959.6362 8098.4111 -7960.3564 8096.5664 -7962.7534 8095.1279 c-7964.3335 8094.1807 -7969.6772 8094.271 -7967.0171 8097.2744 C-7965.1265 8095.7813 -7965.2925 8098.2261 -7966.1709 8099.3408 C-7969.0425 8099.3096 -7969.7368 8097.2261 -7969.6753 8094.2583 c-7969.6748 8094.2358 -7969.6738 8094.2095 -7969.6743 8094.1831 C-7969.5171 8086.8774 -7968.2939 8081.0645 -7966.2314 8076.4688 C-7966.2314 8076.4702 -7966.2305 8076.4717 -7966.2295 8076.4727 c-7965.9839 8076.9551 -7965.6416 8077.2397 -7965.4082 8077.6348 c-7965.3325 8077.7622 -7965.4092 8077.8784 -7965.3354 8077.9736 c-7964.9858 8078.4253 -7964.1567 8079.1104 -7963.6909 8079.48 c-7963.4731 8079.6519 -7963.2432 8079.7388 -7963.0073 8079.9126 c-7962.9722 8079.9375 -7963.0215 8080.0503 -7962.9712 8080.0815 c-7961.8853 8080.7573 -7960.5234 8081.1685 -7958.9258 8081.4111 C-7958.8296 8081.4214 -7958.8574 8081.2837 -7958.7266 8081.3335 C-7958.2632 8081.3804 -7957.7905 8081.4136 -7957.3579 8081.3784 c-7955.0459 8081.1855 -7952.5913 8079.8247 -7951.3726 8078.207 c-7950.2539 8076.7256 -7949.8691 8074.2256 -7950.4976 8072.5039 c-7951.0371 8071.0352 -7952.6226 8069.7095 -7954.7285 8069.1304 c-7956.6016 8068.6133 -7958.6089 8068.8247 -7959.5005 8070.0879 C-7958.8472 8070.0933 -7958.3003 8070.2344 -7958.0142 8070.5879 C-7957.8774 8070.9824 -7957.7456 8071.3784 -7957.9136 8071.9663 C-7958.3599 8072.6943 -7959.2065 8073.3296 -7960.3774 8072.9526 c-7961.6201 8072.5532 -7962.3716 8071.3184 -7962.2129 8070.0879 C-7956.9102 8063.9429 -7949.1982 8061.3862 -7940.4136 8060.7935 C-7940.4482 8060.8086 -7940.4814 8060.8198 -7940.52 8060.8374 c-7941.6611 8061.3462 -7942.4624 8061.8545 -7943.4033 8062.5229 c-7943.7554 8062.7734 -7944.2036 8062.9312 -7944.5024 8063.1719 c-7944.6089 8063.2568 -7944.6362 8063.4624 -7944.7515 8063.5703 c-7945.1304 8063.9292 -7945.5571 8064.2095 -7945.9165 8064.6465 c-7947.0542 8066.0288 -7948.0259 8068.1743 -7947.5405 8070.3413 C-7946.8125 8071.7622 -7945.7759 8072.9839 -7943.6592 8073.5542 c-7943.4385 8073.6157 -7943.2139 8073.6021 -7942.9873 8073.6582 C-7940.0215 8073.7935 -7937.9966 8071.4424 -7938.5264 8068.6157 C-7938.7378 8068.4136 -7938.9067 8068.1831 -7938.9785 8067.8911 C-7939.8179 8067.0503 -7942.0933 8066.791 -7942.7593 8067.6919 C-7942.2905 8067.6406 -7942.0796 8067.6255 -7941.7983 8067.9512 C-7941.4702 8068.8877 -7942.5786 8069.5015 -7943.4355 8068.8447 C-7943.9648 8067.9263 -7943.8184 8067.0093 -7943.3076 8065.9717 c-7943.1006 8065.5503 -7942.7588 8065.2397 -7942.4478 8064.8501 c-7942.0332 8064.3335 -7941.6836 8063.7813 -7941.2266 8063.4023 c-7940.8159 8063.0635 -7940.2915 8062.8496 -7939.8496 8062.5767 c-7939.7305 8062.5039 -7939.6636 8062.4038 -7939.5645 8062.3472 c-7939.2192 8062.1509 -7938.9531 8061.9429 -7938.6035 8061.7871 c-7938.1416 8061.5815 -7937.6157 8061.4775 -7937.0854 8061.2544 c-7936.8232 8061.1465 -7936.6045 8060.9351 -7936.3306 8060.8252 c-7936.1665 8060.7612 -7935.9907 8060.7095 -7935.8188 8060.6543 C-7934.4292 8060.6582 -7933.0215 8060.6973 -7931.5972 8060.7744 c-7929.8882 8060.8198 -7927.6255 8060.8335 -7925.7324 8060.9063 C-7893.6284 8057.3936 -7861.1396 8056.4702 -7828.6343 8056.0225 C-7755.2261 8057.3555 -7665.0371 8058.9888 -7663.5132 8058.9888 c-7660.9375 8058.9888 -7658.8506 8056.8999 -7658.8506 8054.3247 c-7658.8506 8051.7485 -7660.9375 8049.6597 -7663.5132 8049.6597 cfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 10 pt \221\310\211~/ Adobe Calligraphic) -( Brush Tool/ Touch Calligraphic Brush/ Adobe ArtOnPath Brush T) -(ool/ \211\324\202\314\214s 5/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(10 pt \621\710\611~)(1 10 10 75 75 -20 110 1 0 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Touch Calligraphic Brush)(1 12 12 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(\611\724\602\714\614s 5)(1 / Unnamed Brush Pat 40/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623]) 0 Xs([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])Pc0 0 0 0 k(\603z\603\617\603C\603g)Pc0 0 0 1 k(\603u\603\611\603b\603N)Pc0 1 1 0 k(CMYK \603\614\603b\603h)Pc0 0 1 0 k(CMYK \603C\603G\603\615\601[)Pc1 0 1 0 k(CMYK \603O\603\612\601[\603\623)Pc1 0 0 0 k(CMYK \603V\603A\603\623)Pc1 1 0 0 k(CMYK \603u\603\613\601[)Pc0 1 0 0 k(CMYK \603}\603[\603\623\603^)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603u\603\611\603b\603N\602\711\603t\603F\601[\603h 1)PcBb0 0 0 0 Bh2 (\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)PcBb2 (\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603I\603\614\603\623\603W\601A\603C\603G\603\615\601[\601A\603p\601[\603v\603\613)PcBb0 0 0 0 Bh2 (\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\)) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(\603T\601[\603\602\603\623 \(\625\772\616\713\617\763\))Pc(\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(\616\613\612o\614\770\611\712\603`\603F\603b\603J\601[\603{\601[\603h)Pc0 0 0 1 k(C=0 M=0 Y=0 K=100)Pc0 0 0 0.899994 k(C=0 M=0 Y=0 K=90)Pc0 0 0 0.799988 k(C=0 M=0 Y=0 K=80)Pc0 0 0 0.699997 k(C=0 M=0 Y=0 K=70)Pc0 0 0 0.599991 k(C=0 M=0 Y=0 K=60)Pc0 0 0 0.5 k(C=0 M=0 Y=0 K=50)Pc0 0 0 0.399994 k(C=0 M=0 Y=0 K=40)Pc0 0 0 0.299988 k(C=0 M=0 Y=0 K=30)Pc0 0 0 0.199997 k(C=0 M=0 Y=0 K=20)Pc0 0 0 0.099991 k(C=0 M=0 Y=0 K=10)Pc0 0 0 0.049988 k(C=0 M=0 Y=0 K=5)Pc0.1 0.7 0.8 0 k(C=10 M=70 Y=80 K=0)Pc0.1 0.5 0.8 0 k(C=10 M=50 Y=80 K=0)Pc0.65 0.1 1 0 k(C=65 M=10 Y=100 K=0)Pc0.5 0.9 0.1 0 k(C=50 M=90 Y=10 K=0)Pc0.25 0.85 0.6 0.1 k(C=25 M=85 Y=60 K=10)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 0 1 0 0 1 1 255 79 79 0 50 Lb(\203K\203C\203h) Ln1 A0 A1 Ap0 R0 1 0 0 K0 J 0 j 0.340157 w 10 M []0 d0 XR266.4561 -160.1572 m8.50391 -160.1572 L8.50391 -4.25195 L266.4561 -4.25195 L266.4561 -160.1572 Ls1 0 1 0 K260.7861 -154.4883 m14.1729 -154.4883 L14.1729 -9.9209 L260.7861 -9.9209 L260.7861 -154.4883 Ls1 0 0 0 K270.7083 -164.4092 m4.25165 -164.4092 L4.25165 0 L270.7083 0 L270.7083 -164.4092 Lsu0 Ap0.340157 w4.25197 50.4067 m4.25197 8.79248 lSu0 O1 0 0 0 k1 w4.25197 6.73975 m3.89357 7.70557 3.28175 8.9043 2.63429 9.64697 c4.25197 9.06201 l5.86916 9.64697 l5.2217 8.9043 4.60988 7.70557 4.25197 6.73975 cfUUu0 R0 1 0 0 K0.340157 w8.50391 35.4067 m8.50391 8.79248 lSu0 O0 1 0 0 k1 w8.50391 6.73975 m8.14551 7.70557 7.53369 8.9043 6.88623 9.64697 c8.50391 9.06201 l10.1211 9.64697 l9.47363 8.9043 8.86182 7.70557 8.50391 6.73975 cfUUu0 R1 0 1 0 K0.340157 w15.5903 20.4067 m15.5903 8.79248 lSu0 O1 0 1 0 k1 w15.5903 6.73975 m15.2319 7.70557 14.6201 8.9043 13.9727 9.64697 c15.5903 9.06201 l17.2075 9.64697 l16.5601 8.9043 15.9482 7.70557 15.5903 6.73975 cfUUu*u1 0 0 0 k5.9454 55.1069 m6.29256 54.9302 6.73153 54.6606 6.95126 54.4624 c6.67489 54.1226 L6.46249 54.3208 6.02352 54.6113 5.66952 54.8022 C5.9454 55.1069 lf9.1456 51.0503 m9.1456 50.4199 L12.1832 50.4199 L12.1832 50.0161 L5.66952 50.0161 L5.66952 50.4199 L8.67147 50.4199 L8.67147 51.0503 L6.43417 51.0503 L6.43417 51.4468 L8.67147 51.4468 L8.67147 51.9282 L9.28036 51.8926 L9.27353 51.8433 9.23788 51.8076 9.1456 51.7935 c9.1456 51.4468 L11.4185 51.4468 L11.4185 51.0503 L9.1456 51.0503 lf5.91024 52.105 m6.21493 52.4873 6.64657 53.1104 6.98642 53.6768 c7.26962 53.4146 L6.96493 52.8911 6.58993 52.3101 6.32089 51.9492 c6.33505 51.9209 6.34188 51.8926 6.34188 51.8716 c6.34188 51.8433 6.33505 51.8149 6.31356 51.7866 C5.91024 52.105 lf6.36337 56.3315 m6.70321 56.1479 7.12118 55.8716 7.32626 55.6733 c7.09286 55.4185 7.06454 55.376 7.03622 55.3403 c6.83798 55.5459 6.42001 55.8364 6.08016 56.0347 C6.36337 56.3315 lf8.23251 54.5405 m8.23251 54.9155 L7.91415 54.7246 7.56698 54.5474 7.22714 54.3989 c7.17782 54.5054 7.07138 54.668 6.99325 54.7603 c7.91415 55.1211 8.86239 55.7583 9.31552 56.3745 c9.93856 56.3462 L9.92489 56.3105 9.88192 56.2749 9.82528 56.2681 c10.3707 55.6733 11.3546 55.0928 12.1905 54.8022 c12.0982 54.6963 11.9923 54.5264 11.9283 54.4058 c11.0929 54.7388 10.1085 55.355 9.54208 55.978 c9.23788 55.6235 8.7706 55.2485 8.23935 54.9229 c10.8521 54.9229 L10.8521 54.5405 L9.77597 54.5405 L9.77597 54.0308 L11.3975 54.0308 L11.3975 53.6411 L9.77597 53.6411 L9.77597 52.5015 L9.77597 52.0415 9.54208 52.0269 8.74911 52.0269 c8.72812 52.1401 8.67147 52.3032 8.60751 52.4097 c8.89804 52.4023 9.15292 52.4023 9.23056 52.4023 c9.30868 52.4097 9.33017 52.4307 9.33017 52.5015 c9.33017 53.6411 L7.70126 53.6411 L7.70126 54.0308 L9.33017 54.0308 L9.33017 54.5405 L8.23251 54.5405 lf8.8414 53.2446 m8.8204 53.2026 8.77743 53.188 8.71396 53.188 c8.42392 52.8555 7.90683 52.4233 7.38974 52.1333 c7.31942 52.2114 7.19882 52.3247 7.10653 52.395 c7.60263 52.6646 8.10507 53.082 8.38095 53.4429 C8.8414 53.2446 lf11.6378 52.1685 m11.3546 52.4448 10.7813 52.8765 10.3282 53.1812 c10.6329 53.4292 L11.0787 53.1387 11.6593 52.7212 11.9566 52.4517 C11.6378 52.1685 lf*U*u14.2144 52.2041 m14.0802 52.5864 14.0162 53.1387 14.0089 53.5352 c14.0089 54.2007 14.0802 54.9722 14.2501 55.8716 c14.9581 55.7515 L14.9298 55.6592 14.8448 55.6382 14.7525 55.6309 c14.6109 55.0435 14.5118 54.144 14.5118 53.5708 c14.5118 53.4146 14.5186 53.2876 14.5333 53.188 c14.6749 53.5352 14.9366 54.0166 15.085 54.2856 c15.149 54.1938 15.2906 54.0449 15.3614 53.9741 c14.8375 53.0327 14.6817 52.7632 14.6817 52.4663 c14.6817 52.4097 14.6886 52.353 14.7032 52.2891 C14.2144 52.2041 lf18.0093 56.0557 m18.002 55.9707 17.9454 55.9351 17.8253 55.8999 c17.8751 55.2837 17.9454 54.2573 17.9454 53.4429 c17.9385 52.0767 17.4429 50.8447 15.3116 49.9595 c15.234 50.0728 15.064 50.2642 14.9581 50.3706 c16.8907 51.1069 17.4073 52.2749 17.4073 53.436 c17.4073 54.3071 17.3223 55.3335 17.2447 56.0913 C18.0093 56.0557 lf*U*u23.3751 52.0342 m23.3751 50.4766 L23.9063 50.3706 24.1544 50.3706 26.4127 50.3706 c26.3419 50.2573 26.2637 50.0376 26.2354 49.9102 c24.6358 49.9102 L23.085 49.9102 21.9805 50.1934 21.3077 51.4751 c21.0674 50.8237 20.6993 50.2007 20.1612 49.7827 c20.0831 49.8818 19.92 50.0376 19.814 50.1157 c20.6993 50.7739 21.0528 52.0059 21.1661 53.0537 c21.7891 52.9614 L21.7823 52.9121 21.7398 52.8838 21.6475 52.8765 c21.6124 52.6289 21.5626 52.3599 21.4991 52.0908 c21.7891 51.2979 22.2637 50.8521 22.8868 50.6182 c22.8868 53.5352 L20.7344 53.5352 L20.7344 56.0273 L25.6197 56.0273 L25.6197 53.5352 L23.3751 53.5352 L23.3751 52.4873 L25.8179 52.4873 L25.8179 52.0342 L23.3751 52.0342 lf1 D21.209 55.5669 m21.209 53.9956 L25.1241 53.9956 L25.1241 55.5669 L21.209 55.5669 lf*U*u0 D29.2159 56.0767 m29.2012 55.9917 29.1378 55.9424 28.9962 55.9214 c28.9395 55.1001 28.8687 53.2236 28.8687 52.1758 c28.8687 51.1206 29.3926 50.6108 30.2847 50.6108 c31.1485 50.6108 32.0264 51.043 32.8336 51.9565 c32.9044 51.8433 33.0674 51.6167 33.1524 51.5386 c32.3238 50.5972 31.3184 50.1011 30.2774 50.1011 c28.9893 50.1011 28.3306 50.8447 28.3306 52.1831 c28.3306 53.0747 28.3946 55.27 28.4439 56.1406 C29.2159 56.0767 lf*U*u34.6876 50.2007 m34.4683 50.7104 34.3834 51.7651 34.3834 52.6929 c34.3834 53.6343 34.5323 54.8169 34.7657 55.999 c35.4522 55.8647 L35.4385 55.7935 35.3672 55.7441 35.2686 55.7368 c35.0137 54.7671 34.8575 53.5068 34.8575 52.6855 c34.8575 52.1475 34.8648 51.6094 34.9214 51.3472 c35.0772 51.772 35.3604 52.4517 35.5088 52.7847 c35.8277 52.4873 L35.5938 52.0059 35.0987 50.9297 35.0987 50.5972 c35.0987 50.4976 35.1197 50.3916 35.169 50.2573 C34.6876 50.2007 lf36.4864 54.3706 m37.0811 54.3638 37.6758 54.3564 38.2706 54.3989 c38.2422 55.0078 38.2208 55.5317 38.2066 56.0557 c38.9219 56.0347 L38.9146 55.9634 38.8506 55.9067 38.7374 55.8857 c38.7447 55.4326 38.7588 54.9722 38.773 54.4341 c39.3321 54.4907 39.7852 54.5903 40.1607 54.7173 c40.2247 54.2222 L39.8848 54.1157 39.3961 54.0166 38.794 53.9673 c38.8223 53.1812 38.858 52.353 38.879 51.8999 c39.4171 51.6802 39.9551 51.3335 40.3233 51.0005 c40.0474 50.5474 L39.7569 50.8374 39.3394 51.1489 38.9004 51.3545 c38.8936 50.7524 38.7803 50.0801 37.7178 50.0801 c36.8897 50.0801 36.3375 50.4766 36.3375 51.0996 c36.3375 51.8218 37.0665 52.1401 37.7178 52.1401 c37.9376 52.1401 38.171 52.1118 38.3907 52.0483 c38.3692 52.4946 38.3272 53.2378 38.2916 53.9316 c38.0723 53.9175 37.7745 53.9106 37.5694 53.9106 c36.4932 53.9106 L36.4864 54.3706 lf1 D38.4258 51.5884 m38.1993 51.6587 37.959 51.7153 37.7252 51.7153 c37.293 51.7153 36.7764 51.5601 36.7764 51.1138 c36.7764 50.7173 37.2012 50.519 37.7178 50.519 c38.2422 50.519 38.4332 50.7739 38.4332 51.3403 C38.4258 51.5884 lf*U*u0 D46.7159 50.5332 m46.0928 50.4199 45.2715 50.3706 44.5635 50.3706 c43.9688 50.3706 43.4522 50.4058 43.1758 50.4624 c42.3194 50.6538 41.9512 51.1919 41.9512 51.8149 c41.9512 52.3599 42.2559 52.9048 42.6734 53.3296 c43.084 53.1177 L42.6876 52.7065 42.461 52.2534 42.461 51.8569 c42.461 51.4468 42.7374 51.0713 43.3458 50.937 c43.5938 50.8804 44.0118 50.8521 44.5001 50.8521 c45.1866 50.8521 46.0079 50.9087 46.6807 51.043 C46.7159 50.5332 lf43.5372 54.1089 m43.9053 54.3921 44.4083 54.7388 44.7901 54.9302 c44.7901 54.937 L44.252 54.8735 43.0206 54.8452 42.2344 54.8521 c42.2344 54.9868 42.2344 55.2202 42.2276 55.3477 c42.3829 55.3403 45.1016 55.2983 46.2628 55.5742 c46.3194 55.0503 L45.4771 54.9512 44.3936 54.2148 43.9405 53.854 C43.5372 54.1089 lf*U*u51.8555 55.0928 m51.8272 55.0288 51.7706 54.9795 51.6788 54.9795 c51.4239 52.7778 50.6876 50.8589 49.5118 50.8589 c48.9171 50.8589 48.379 51.4536 48.379 52.5723 c48.379 54.2715 49.7032 55.6948 51.5655 55.6948 c53.6114 55.6948 54.4962 54.3989 54.4962 53.0181 c54.4962 51.3335 53.5196 50.519 51.8057 50.1226 c51.7422 50.2358 51.6221 50.4272 51.5088 50.5542 c53.1368 50.8657 53.9727 51.6587 53.9727 52.9971 c53.9727 54.1655 53.2217 55.2271 51.5655 55.2271 c51.4942 55.2271 51.4166 55.2202 51.3526 55.2134 C51.8555 55.0928 lf1 D51.1758 55.1851 m49.7457 55.0078 48.8604 53.8257 48.8604 52.5864 c48.8604 51.8286 49.1866 51.3545 49.5264 51.3545 c50.3829 51.3545 50.9991 53.2446 51.1758 55.1851 cf*U*u0 D61.1793 53.8823 m61.1651 53.854 61.1299 53.8257 61.087 53.811 c60.5069 51.6733 59.3243 50.6323 57.2071 50.0444 c57.1436 50.1724 57.0088 50.3491 56.9102 50.4556 c58.836 50.937 60.0323 51.9282 60.4786 53.5708 c55.7911 53.5708 L55.7911 54.0522 L60.6905 54.0522 L60.7618 54.0942 L61.1793 53.8823 lf60.5137 55.397 m56.4781 55.397 L56.4781 55.8647 L60.5137 55.8647 L60.5137 55.397 lf*U*u68.3438 55.73 m68.3155 55.6948 68.2725 55.6733 68.209 55.6733 c68.1876 55.6733 68.1666 55.6733 68.1382 55.6802 c67.5928 55.1284 66.8072 54.4839 66.1202 53.9883 c66.1768 53.9673 66.2618 53.9243 66.2901 53.9106 c66.2764 53.8677 66.2125 53.8257 66.1348 53.8184 c66.1348 50.0161 L65.6177 50.0161 L65.6177 53.6558 L64.8672 53.1245 63.8902 52.5513 62.92 52.0767 c62.8497 52.1899 62.7217 52.3667 62.6231 52.4663 c64.5557 53.3579 66.6729 54.8735 67.8126 56.1265 C68.3438 55.73 lf*U*u70.2618 55.6099 m70.9981 55.376 71.8477 55.0078 72.3712 54.647 c72.1026 54.2007 L71.5928 54.562 70.7569 54.937 70.0352 55.1851 C70.2618 55.6099 lf70.2335 50.7031 m72.7466 51.4819 74.4175 52.8911 75.2671 54.8521 c75.4161 54.7319 75.5787 54.6396 75.7276 54.562 c74.8423 52.6216 73.1148 51.1138 70.7149 50.314 c70.7076 50.25 70.6651 50.1792 70.6153 50.1509 C70.2335 50.7031 lf*U*u77.0718 55.2837 m77.5108 55.2554 78.0987 55.2554 78.5801 55.2554 c78.8985 55.2554 79.2598 55.2627 79.5567 55.27 c79.5499 55.6099 79.543 56.0063 79.543 56.2539 c80.2579 56.2183 L80.251 56.1333 80.1871 56.0913 80.0665 56.0698 c80.0596 55.9565 80.0665 55.4116 80.0665 55.291 c80.8951 55.3335 81.7164 55.4043 82.4171 55.5669 c82.481 55.1001 L81.7872 54.9438 80.9659 54.8735 80.0665 54.8306 c80.0738 54.4058 80.0811 53.9673 80.0948 53.5278 c80.7818 53.5708 81.5181 53.6626 82.0919 53.8042 c82.1485 53.3442 L81.5538 53.2163 80.8101 53.1313 80.1021 53.0962 c80.1587 51.9136 L80.8101 51.7017 81.504 51.3335 82.2403 50.8091 c81.9288 50.3774 L81.2916 50.8804 80.6895 51.2202 80.1729 51.4185 c80.1729 51.3052 80.1797 51.1772 80.1797 51.0854 c80.1729 50.4126 79.7696 50.0234 78.9127 50.0234 c78.0137 50.0234 77.355 50.3916 77.355 51.0571 c77.355 51.7368 78.127 52.1118 78.92 52.1118 c79.1534 52.1118 79.4014 52.0908 79.6631 52.0269 c79.6563 52.3315 79.6417 52.6997 79.6348 53.082 c79.4083 53.0747 79.1534 53.0679 78.9483 53.0679 c77.7374 53.0679 77.3975 53.2593 77.3975 53.6694 c77.3975 53.939 77.6026 54.1582 78.0557 54.4487 c78.3956 54.229 L78.0772 54.0522 77.9073 53.896 77.9073 53.7544 c77.9073 53.5425 78.2403 53.4995 79.1392 53.4995 c79.295 53.4995 79.4581 53.4995 79.6133 53.5068 c79.5713 54.8169 L79.2667 54.8022 78.9127 54.8022 78.5938 54.8022 c78.1407 54.8022 77.4966 54.8022 77.0718 54.8169 C77.0718 55.2837 lf1 D79.6915 51.5952 m79.4083 51.6733 79.1465 51.7085 78.8985 51.7085 c78.3604 51.7085 77.8155 51.4888 77.8155 51.064 c77.8155 50.6465 78.3106 50.4409 78.9268 50.4409 c79.4864 50.4409 79.6983 50.689 79.6983 51.1846 C79.6915 51.5952 lf*U*u0 D83.9175 55.4253 m84.4483 55.4468 88.8096 55.7583 89.7305 55.7651 c89.7374 55.2344 L89.6456 55.2417 89.5606 55.2417 89.4756 55.2417 c89.0645 55.2417 88.7178 55.1704 88.2647 54.8804 c87.2027 54.2432 86.1758 53.103 86.1758 52.1899 c86.1758 51.1987 86.8702 50.6108 88.626 50.3843 c88.3921 49.8892 L86.3814 50.1792 85.6309 50.9297 85.6309 52.1899 c85.6309 53.188 86.6153 54.3989 87.9107 55.2134 c87.1319 55.1567 85.043 55.0005 84.1299 54.9155 c84.1085 54.8589 84.0308 54.8096 83.9742 54.8022 C83.9175 55.4253 lf88.5054 54.0308 m88.8453 53.7759 89.2491 53.3579 89.4683 53.0537 c89.1993 52.8345 L89.001 53.146 88.5694 53.5845 88.2647 53.8184 C88.5054 54.0308 lf89.2701 54.6538 m89.6172 54.3989 90.0274 53.9883 90.233 53.6768 c89.9639 53.4644 L89.7725 53.7476 89.3624 54.1865 89.0294 54.4414 C89.2701 54.6538 lf*UUu*u0 1 0 0 k10.1304 39.1226 m9.84717 38.6626 9.53564 38.252 9.21729 37.9121 c9.16064 38.0254 9.04053 38.252 8.9624 38.3579 c9.67725 39.0942 10.3784 40.3335 10.7964 41.5864 c11.3765 41.3955 L11.3481 41.3462 11.2988 41.3247 11.2139 41.3247 c11.0229 40.8149 10.7964 40.312 10.5415 39.8306 c10.7397 39.7739 L10.7324 39.7246 10.6899 39.6963 10.605 39.6821 c10.605 35.0591 L10.1304 35.0591 L10.1304 39.1226 lf15.731 38.875 m13.5928 38.875 L13.5928 35.8237 L15.6108 35.8237 L15.6108 35.3633 L11.2212 35.3633 L11.2212 35.8237 L13.104 35.8237 L13.104 38.875 L11.0513 38.875 L11.0513 39.3423 L13.104 39.3423 L13.104 41.5298 L13.7271 41.4878 L13.7202 41.438 13.6851 41.4028 13.5928 41.3955 c13.5928 39.3423 L15.731 39.3423 L15.731 38.875 lf*U*u19.4683 35.8804 m22.6831 35.8804 L22.6831 35.3989 L16.2471 35.3989 L16.2471 35.8804 L18.9731 35.8804 L18.9731 41.5229 L19.6172 41.4805 L19.6099 41.4312 19.5679 41.3955 19.4683 41.3813 c19.4683 39.2856 L22.187 39.2856 L22.187 38.8042 L19.4683 38.8042 L19.4683 35.8804 lf*U*u26.0024 41.2964 m25.9888 41.2114 25.9038 41.1763 25.769 41.1689 c25.6909 40.7725 25.564 40.0854 25.479 39.6606 c25.7974 39.6963 26.0874 39.7246 26.2646 39.7246 c27.3408 39.7388 27.709 39.0239 27.709 37.9614 c27.709 37.4307 27.6099 36.8003 27.4683 36.3755 c27.2485 35.6538 26.7954 35.3066 26.208 35.3066 c25.9175 35.3066 25.5356 35.4272 24.9263 35.9224 c25.0044 36.0503 25.061 36.2056 25.1177 36.3545 c25.6841 35.9155 25.9814 35.8164 26.2007 35.8164 c26.6045 35.8164 26.8452 36.0713 26.9868 36.5244 c27.1353 36.9634 27.2134 37.6147 27.2134 37.9761 c27.2065 38.7827 26.9443 39.2642 26.2363 39.2573 c26.0239 39.2573 25.7339 39.229 25.3726 39.1865 c25.0186 37.7422 24.6011 36.5034 23.9214 35.3633 c23.4536 35.5898 L24.1406 36.687 24.5298 37.7847 24.8628 39.1299 c24.5015 39.0874 23.9849 39.0239 23.6025 38.96 c23.5601 39.4556 L23.9067 39.498 24.4878 39.562 24.9619 39.6187 c25.0679 40.1353 25.1812 40.7725 25.2661 41.3955 C26.0024 41.2964 lf27.645 41.5161 m27.9849 41.2539 28.3887 40.8291 28.5942 40.5249 c28.3179 40.3267 L28.1196 40.6309 27.6948 41.0767 27.3833 41.3105 C27.645 41.5161 lf29.231 37.395 m28.9976 38.4146 28.438 39.2715 27.7866 39.8096 c28.1978 40.0854 L28.8984 39.498 29.5073 38.6128 29.7407 37.5864 C29.231 37.395 lf28.7144 41.792 m29.061 41.5371 29.4648 41.1123 29.6704 40.8081 c29.394 40.6025 L29.1958 40.9067 28.771 41.3599 28.4595 41.5938 C28.7144 41.792 lf*U*u31.8359 37.459 m31.7017 37.8413 31.6377 38.3936 31.6304 38.79 c31.6304 39.4556 31.7017 40.2271 31.8716 41.1265 c32.5796 41.0063 L32.5513 40.9141 32.4663 40.8931 32.374 40.8857 c32.2324 40.2983 32.1333 39.3989 32.1333 38.8257 c32.1333 38.6694 32.1401 38.5425 32.1548 38.4429 c32.2964 38.79 32.5581 39.2715 32.7065 39.5405 c32.7705 39.4487 32.9121 39.2998 32.9829 39.229 c32.459 38.2876 32.3032 38.0181 32.3032 37.7212 c32.3032 37.6646 32.3101 37.6079 32.3247 37.5439 C31.8359 37.459 lf35.6309 41.3105 m35.6235 41.2256 35.5669 41.1899 35.4468 41.1548 c35.4966 40.5386 35.5669 39.5122 35.5669 38.6978 c35.5601 37.3315 35.0645 36.0996 32.9331 35.2144 c32.8555 35.3276 32.6855 35.519 32.5796 35.6255 c34.5122 36.3618 35.0288 37.5298 35.0288 38.6909 c35.0288 39.562 34.9438 40.5884 34.8662 41.3462 C35.6309 41.3105 lf*U*u43.3687 39.1372 m43.3545 39.1089 43.3188 39.0806 43.2769 39.0659 c42.6958 36.9282 41.5137 35.8872 39.397 35.2993 c39.333 35.4272 39.1987 35.604 39.0991 35.7104 c41.0249 36.1919 42.2217 37.1831 42.6675 38.8257 c37.981 38.8257 L37.981 39.3071 L42.8804 39.3071 L42.9507 39.3491 L43.3687 39.1372 lf42.7031 40.6519 m38.6675 40.6519 L38.6675 41.1196 L42.7031 41.1196 L42.7031 40.6519 lf*U*u50.5327 40.9849 m50.5044 40.9497 50.4624 40.9282 50.3984 40.9282 c50.3774 40.9282 50.356 40.9282 50.3276 40.9351 c49.7827 40.3833 48.9966 39.7388 48.3101 39.2432 c48.3667 39.2222 48.4517 39.1792 48.48 39.1655 c48.4653 39.1226 48.4019 39.0806 48.3237 39.0732 c48.3237 35.271 L47.8071 35.271 L47.8071 38.9106 L47.0566 38.3794 46.0796 37.8062 45.1099 37.3315 c45.0386 37.4448 44.9116 37.6216 44.812 37.7212 c46.7451 38.6128 48.8618 40.1284 50.002 41.3813 C50.5327 40.9849 lf*U*u52.4507 40.8647 m53.187 40.6309 54.0366 40.2627 54.561 39.9019 c54.2915 39.4556 L53.7817 39.8169 52.9468 40.1919 52.2241 40.4399 C52.4507 40.8647 lf52.4224 35.958 m54.936 36.7368 56.6069 38.146 57.4565 40.1069 c57.605 39.9868 57.7681 39.8945 57.9165 39.8169 c57.0317 37.8765 55.3042 36.3687 52.9038 35.5688 c52.897 35.5049 52.8545 35.4341 52.8052 35.4058 C52.4224 35.958 lf*U*u65.272 41.6079 m64.5005 40.9634 63.8706 39.7813 63.8706 38.3511 c63.8706 36.8853 64.522 35.7173 65.272 35.0942 c65.272 35.0591 L64.8472 35.0591 L64.1323 35.7031 63.4951 36.8926 63.4951 38.3511 c63.4951 39.8096 64.1323 40.999 64.8472 41.6431 c65.272 41.6431 L65.272 41.6079 lf*U*u68.5425 38.167 m68.2524 37.7988 67.8413 37.5796 67.3247 37.5796 c66.4185 37.5796 65.8589 38.2876 65.8589 39.1865 c65.8589 40.1567 66.4966 41.0483 67.5371 41.0483 c68.5283 41.0483 69.1587 40.1851 69.1587 38.8325 c69.1587 37.0698 68.2661 35.8447 66.9067 35.6323 c66.6592 35.5898 66.4326 35.5757 66.2769 35.5825 c66.2769 36.0713 L66.4253 36.0571 66.5952 36.0786 66.8218 36.1069 c67.7144 36.2339 68.3867 36.9565 68.564 38.167 C68.5425 38.167 lf1 D66.4536 39.2222 m66.4536 38.5068 66.8574 38.0254 67.4663 38.0254 c68.0396 38.0254 68.564 38.4644 68.564 38.8892 c68.564 39.9087 68.1885 40.5952 67.4878 40.5952 c66.8716 40.5952 66.4536 40.0151 66.4536 39.2222 cf*U*u0 D71.2788 35.6606 m71.2788 40.4116 L71.2646 40.4116 L70.394 39.9087 L70.2524 40.3477 L71.3496 40.9634 L71.8521 40.9634 L71.8521 35.6606 L71.2788 35.6606 lf*U*u79.1558 36.3618 m78.8442 36.043 L76.8828 38.0044 L74.9287 36.043 L74.6172 36.3618 L76.5713 38.3159 L74.6172 40.27 L74.9287 40.5884 L76.8828 38.6274 L78.8442 40.5884 L79.1558 40.2769 L77.2017 38.3159 L79.1558 36.3618 lf*U*u83.7212 40.9634 m83.7212 40.4751 L81.8169 40.4751 L81.5972 38.9741 L81.7104 38.9883 81.8237 39.0024 82.0083 39.0024 c82.9497 39.0024 83.7925 38.4429 83.7925 37.374 c83.7925 36.3262 83.0132 35.5757 81.9653 35.5757 c81.4346 35.5757 80.9888 35.7314 80.7476 35.8872 c80.9175 36.3472 L81.1157 36.2129 81.5054 36.0503 81.9653 36.0503 c82.6313 36.0503 83.2046 36.5386 83.1978 37.3032 c83.1978 38.0327 82.73 38.5425 81.7388 38.5425 c81.4556 38.5425 81.2363 38.521 81.0591 38.4927 c81.3921 40.9634 L83.7212 40.9634 lf*U*u87.6265 40.9634 m87.6265 40.4751 L85.7217 40.4751 L85.5024 38.9741 L85.6157 38.9883 85.729 39.0024 85.9126 39.0024 c86.8545 39.0024 87.6968 38.4429 87.6968 37.374 c87.6968 36.3262 86.9185 35.5757 85.8706 35.5757 c85.3394 35.5757 84.8931 35.7314 84.6528 35.8872 c84.8228 36.3472 L85.021 36.2129 85.4102 36.0503 85.8706 36.0503 c86.5356 36.0503 87.1094 36.5386 87.1021 37.3032 c87.1021 38.0327 86.6353 38.5425 85.644 38.5425 c85.3608 38.5425 85.1411 38.521 84.9644 38.4927 c85.2969 40.9634 L87.6265 40.9634 lf*U*u94.0728 35.6606 m93.4922 35.6606 L93.4922 37.8911 L93.4922 38.6411 93.2231 39.1226 92.6426 39.1226 c92.1685 39.1226 91.7363 38.6768 91.7363 38.0894 c91.7363 35.6606 L91.1558 35.6606 L91.1558 38.0396 L91.1558 38.6558 90.894 39.1226 90.3486 39.1226 c89.8462 39.1226 89.3999 38.6274 89.3999 38.0254 c89.3999 35.6606 L88.8193 35.6606 L88.8193 38.5278 L88.8193 38.9243 88.8052 39.2075 88.791 39.5264 c89.3081 39.5264 L89.3433 38.9033 L89.3647 38.9033 L89.5767 39.2788 89.9312 39.6113 90.5396 39.6113 c91.0425 39.6113 91.4321 39.2998 91.5947 38.8394 c91.6089 38.8394 L91.8638 39.2998 92.2534 39.6113 92.8481 39.6113 c93.3223 39.6113 94.0728 39.3071 94.0728 37.9829 C94.0728 35.6606 lf*U*u100.4722 35.6606 m99.8916 35.6606 L99.8916 37.8911 L99.8916 38.6411 99.6226 39.1226 99.042 39.1226 c98.5679 39.1226 98.1357 38.6768 98.1357 38.0894 c98.1357 35.6606 L97.5552 35.6606 L97.5552 38.0396 L97.5552 38.6558 97.2935 39.1226 96.748 39.1226 c96.2456 39.1226 95.7993 38.6274 95.7993 38.0254 c95.7993 35.6606 L95.2188 35.6606 L95.2188 38.5278 L95.2188 38.9243 95.2046 39.2075 95.1904 39.5264 c95.7075 39.5264 L95.7427 38.9033 L95.7642 38.9033 L95.9761 39.2788 96.3306 39.6113 96.939 39.6113 c97.4419 39.6113 97.8315 39.2998 97.9941 38.8394 c98.0083 38.8394 L98.2632 39.2998 98.6528 39.6113 99.2476 39.6113 c99.7217 39.6113 100.4722 39.3071 100.4722 37.9829 C100.4722 35.6606 lf*U*u101.2856 35.0942 m102.0571 35.7388 102.687 36.9209 102.687 38.3511 c102.687 39.8169 102.0356 40.9849 101.2856 41.6079 c101.2856 41.6431 L101.7104 41.6431 L102.4321 40.999 103.0625 39.8096 103.0625 38.3511 c103.0625 36.8926 102.4321 35.7031 101.7104 35.0591 c101.2856 35.0591 L101.2856 35.0942 lf*UUu*u1 0 1 0 k17.1133 22.1758 m17.1133 21.9209 17.1489 21.8784 17.3545 21.8784 c18.0479 21.8784 L18.2393 21.8784 18.2744 22.0625 18.2959 22.9194 c18.4023 22.8345 18.5933 22.7495 18.7275 22.7139 c18.6782 21.7227 18.5576 21.4253 18.0835 21.4253 c17.2905 21.4253 L16.7808 21.4253 16.6465 21.5811 16.6465 22.1831 c16.6465 24.0522 L15.8389 23.875 L15.7539 24.3071 L16.6465 24.5054 L16.6465 26.438 L17.2549 26.4028 L17.248 26.353 17.2129 26.3179 17.1133 26.3032 c17.1133 24.6113 L18.2817 24.8735 18.5293 24.9155 18.7773 24.9585 c18.7915 24.8589 18.8125 24.7603 18.8623 24.5337 c17.1133 24.1509 L17.1133 22.1758 lf22.0483 25.9849 m22.3105 25.9634 L22.3032 25.9214 22.3032 25.8501 22.2959 25.8008 c22.1826 22.0342 22.0767 20.8091 21.7793 20.4409 c21.5742 20.165 21.3545 20.1294 20.8872 20.1294 c20.6816 20.1294 20.4482 20.144 20.2148 20.1577 c20.2075 20.2993 20.1509 20.5049 20.0659 20.6392 c20.498 20.6108 20.8799 20.604 21.043 20.604 c21.1777 20.604 21.2554 20.6323 21.3403 20.7241 c21.5742 21.0005 21.7085 22.2183 21.8076 25.5249 c20.2568 25.5249 L20.1865 23.5562 20.0659 21.2271 18.1685 20.0518 c18.0908 20.1724 17.9346 20.335 17.8076 20.4126 c19.5918 21.4536 19.7261 23.6128 19.7686 25.5249 c18.4443 25.5249 L18.4443 25.9849 L22.0483 25.9849 lf*U*u23.2583 25.0151 m23.832 25.0151 24.3555 25.0645 24.5894 25.1211 c24.6035 25.5459 24.6104 25.7798 24.6387 26.4238 c25.3682 26.3672 L25.354 26.2896 25.29 26.2397 25.1699 26.2256 c25.1416 25.9141 25.1133 25.4751 25.0991 25.2134 c25.3184 25.1284 L25.1484 24.7886 25.0781 24.3706 25.0352 24.1157 c25.8145 24.8452 26.6777 25.3618 27.2656 25.3618 c27.9312 25.3618 28.2637 24.8945 28.2637 24.0732 c28.2637 23.981 28.2568 23.8892 28.25 23.7974 c28.2002 23.1743 28.1294 22.2891 28.1294 21.7227 c28.1294 21.2979 28.1787 21.0713 28.4766 21.0713 c28.6885 21.0713 29.1133 21.2837 29.418 21.5454 c29.4321 21.4038 29.4888 21.1138 29.5171 21.0073 c29.1563 20.7456 28.7314 20.5474 28.4053 20.5474 c27.8105 20.5474 27.6123 20.9014 27.6123 21.6377 c27.6123 22.0059 27.7402 23.9526 27.7402 23.96 c27.7402 24.5757 27.5273 24.8521 27.1807 24.8521 c26.6494 24.8521 25.7578 24.2788 25.0215 23.4995 c25.0215 22.4731 25.0215 21.2129 25.0283 20.25 c24.5327 20.25 L24.54 20.6606 24.5327 22.6782 24.54 23.1313 c24.292 22.6362 23.8105 21.9917 23.251 21.4253 c22.9961 21.8716 L23.584 22.4233 24.2422 23.2803 24.5537 24.0093 c24.5537 24.2148 24.561 24.4058 24.5684 24.6323 c24.3203 24.5757 23.8037 24.519 23.2656 24.5122 C23.2583 25.0151 lf*U*u30.3447 25.6802 m30.876 25.7017 35.2373 26.0132 36.1572 26.02 c36.1646 25.4893 L36.0723 25.4966 35.9873 25.4966 35.9023 25.4966 c35.4922 25.4966 35.145 25.4253 34.6919 25.1353 c33.6299 24.498 32.6035 23.3579 32.6035 22.4448 c32.6035 21.4536 33.2969 20.8657 35.0527 20.6392 c34.8193 20.144 L32.8086 20.4341 32.0581 21.1846 32.0581 22.4448 c32.0581 23.4429 33.042 24.6538 34.3379 25.4683 c33.5874 25.4185 31.4707 25.2554 30.5571 25.1704 c30.5361 25.1138 30.458 25.0645 30.4014 25.0571 C30.3447 25.6802 lf*U*u37.8066 20.4556 m37.5869 20.9653 37.502 22.02 37.502 22.9478 c37.502 23.8892 37.6504 25.0718 37.8843 26.2539 c38.5713 26.1196 L38.5566 26.0483 38.4863 25.999 38.3867 25.9917 c38.1318 25.022 37.9766 23.7617 37.9766 22.9404 c37.9766 22.4023 37.9834 21.8643 38.04 21.6021 c38.1958 22.0269 38.479 22.7065 38.6279 23.0396 c38.9463 22.7422 L38.7129 22.2607 38.2168 21.1846 38.2168 20.8521 c38.2168 20.7524 38.2383 20.6465 38.2881 20.5122 C37.8066 20.4556 lf39.6045 24.6255 m40.1992 24.6187 40.7939 24.6113 41.3887 24.6538 c41.3604 25.2627 41.3394 25.7866 41.3252 26.3105 c42.04 26.2896 L42.0332 26.2183 41.9697 26.1616 41.8564 26.1406 c41.8633 25.6875 41.8774 25.2271 41.8916 24.689 c42.4512 24.7456 42.9043 24.8452 43.2793 24.9722 c43.3428 24.4771 L43.0029 24.3706 42.5146 24.2715 41.9131 24.2222 c41.9414 23.436 41.9766 22.6079 41.998 22.1548 c42.5361 21.9351 43.0742 21.5884 43.4424 21.2554 c43.166 20.8022 L42.876 21.0923 42.458 21.4038 42.019 21.6094 c42.0117 21.0073 41.8984 20.335 40.8369 20.335 c40.0083 20.335 39.4561 20.7314 39.4561 21.3545 c39.4561 22.0767 40.1855 22.395 40.8369 22.395 c41.0562 22.395 41.29 22.3667 41.5093 22.3032 c41.4883 22.7495 41.4453 23.4927 41.4102 24.1865 c41.1904 24.1724 40.8936 24.1655 40.688 24.1655 c39.6118 24.1655 L39.6045 24.6255 lf1 D41.5449 21.8433 m41.3184 21.9136 41.0771 21.9702 40.8438 21.9702 c40.4121 21.9702 39.895 21.8149 39.895 21.3687 c39.895 20.9722 40.3198 20.7739 40.8369 20.7739 c41.3604 20.7739 41.5518 21.0288 41.5518 21.5952 C41.5449 21.8433 lf*U*u0 D44.5107 26.2964 m50.4648 26.2964 L50.4648 20.0444 L49.9766 20.0444 L49.9766 20.3916 L44.9775 20.3916 L44.9775 20.0444 L44.5107 20.0444 L44.5107 26.2964 lf1 D44.9775 20.8374 m49.9766 20.8374 L49.9766 25.8433 L44.9775 25.8433 L44.9775 20.8374 lf0 D49.5801 24.1089 m47.916 24.1089 L48.2983 23.2446 48.9639 22.438 49.6787 22.0483 c49.5728 21.9702 49.4312 21.8149 49.3604 21.6943 c48.7021 22.1191 48.0859 22.9121 47.6826 23.7759 c47.6826 21.2485 L47.2295 21.2485 L47.2295 23.7334 L46.8257 22.8765 46.231 22.105 45.6006 21.6802 c45.5303 21.7866 45.3955 21.9351 45.2964 22.0132 c45.9688 22.4165 46.6064 23.2378 46.9956 24.1089 c45.4307 24.1089 L45.4307 24.5264 L47.2295 24.5264 L47.2295 25.5601 L47.8169 25.5176 L47.8096 25.4751 47.7744 25.4399 47.6826 25.4253 c47.6826 24.5264 L49.5801 24.5264 L49.5801 24.1089 lf*U*u53.6855 23.5278 m54.1528 23.769 54.8818 23.939 55.4414 23.939 c56.5674 23.939 57.2754 23.2803 57.2754 22.2397 c57.2754 20.958 56.1494 20.25 54.7266 20.25 c53.8057 20.25 53.1758 20.6182 53.1758 21.2412 c53.1758 21.7651 53.6924 22.1899 54.3369 22.1899 c55.1367 22.1899 55.6748 21.5527 55.7813 20.9087 c56.3477 21.1206 56.7583 21.5737 56.7583 22.2324 c56.7583 22.9971 56.1919 23.4858 55.2998 23.4858 c54.2378 23.4858 53.1973 23.0112 52.7295 22.5581 c52.5176 22.3599 52.2412 22.0625 52.0498 21.8433 c51.689 22.2041 L52.3262 22.8696 54.3511 24.8022 55.314 25.7017 c54.9033 25.645 53.4873 25.5884 52.6802 25.5601 c52.6592 25.5103 52.5879 25.4683 52.5313 25.4536 c52.4746 26.0557 L53.4307 26.063 55.2573 26.1333 55.7744 26.2114 c55.8804 26.2612 L56.2559 25.8008 L56.2202 25.7725 56.1563 25.7441 56.0859 25.7368 c55.583 25.3267 54.2378 24.0659 53.6855 23.5352 C53.6855 23.5278 lf1 D54.6626 20.6958 m54.875 20.6958 55.123 20.7241 55.3066 20.7671 c55.229 21.312 54.8252 21.772 54.3018 21.772 c53.9336 21.772 53.6074 21.5737 53.6074 21.2485 c53.6074 20.8164 54.1953 20.6958 54.6626 20.6958 cf*U*u0 D64.8994 24.937 m63.625 24.937 L63.8096 24.8735 63.8589 24.8589 63.9082 24.8379 c63.8872 24.7886 63.8306 24.7671 63.7314 24.7671 c63.3208 23.606 62.7617 22.6855 62.0181 21.9419 c62.8184 21.2769 63.8022 20.7881 64.9844 20.519 c64.8711 20.4058 64.7227 20.1934 64.6445 20.0444 c63.4341 20.356 62.4429 20.873 61.6289 21.5884 c60.8286 20.9155 59.8447 20.4199 58.6406 20.0518 c58.5913 20.1724 58.457 20.3706 58.3647 20.4839 c59.5259 20.8164 60.4888 21.2837 61.2676 21.9282 c60.5029 22.7139 59.9224 23.6909 59.5049 24.8452 c59.7949 24.937 L58.4287 24.937 L58.4287 25.4043 L61.395 25.4043 L61.395 26.6431 L62.0254 26.6011 L62.0181 26.5513 61.9756 26.5161 61.8838 26.5015 c61.8838 25.4043 L64.8994 25.4043 L64.8994 24.937 lf1 D59.9932 24.937 m60.3613 23.9033 60.9136 23.0044 61.6572 22.2749 c62.3579 22.9761 62.8887 23.8467 63.2642 24.937 C59.9932 24.937 lf*U*u0 D71.9297 22.6289 m71.9297 22.1758 L68.9912 22.1758 L68.9912 20.6465 L68.9912 20.0801 68.6514 20.0728 67.4761 20.0728 c67.4404 20.2007 67.3486 20.3916 67.2705 20.5259 c67.5537 20.519 67.8301 20.5122 68.0283 20.5122 c68.4673 20.5122 68.4883 20.5122 68.4883 20.6538 c68.4883 22.1758 L65.543 22.1758 L65.543 22.6289 L68.4883 22.6289 L68.4883 23.2876 L68.708 23.2729 L69.0903 23.4927 69.4941 23.79 69.8057 24.0806 c66.874 24.0806 L66.874 24.519 L70.2871 24.519 L70.3721 24.5474 L70.7471 24.314 L70.7329 24.2788 70.6836 24.2573 70.6406 24.2505 c70.2373 23.8394 69.5928 23.3442 68.9912 23.0044 c68.9912 22.6289 L71.9297 22.6289 lf66.2725 25.3052 m66.2725 24.1016 L65.8052 24.1016 L65.8052 25.7583 L68.4746 25.7583 L68.4746 26.6646 L69.1113 26.6221 L69.1045 26.5728 69.0693 26.5371 68.9697 26.5229 c68.9697 25.7583 L71.6885 25.7583 L71.6885 24.1016 L71.207 24.1016 L71.207 25.3052 L66.2725 25.3052 lf*U*u75.2773 26.4312 m75.2563 26.3745 75.1855 26.3179 75.0581 26.3105 c75.0088 25.999 74.9448 25.6309 74.8809 25.355 c75.5752 25.397 76.3467 25.5176 76.9629 25.7017 c77.0405 25.2202 L76.3818 25.0571 75.6035 24.9438 74.7891 24.8804 c74.4492 23.521 73.9819 22.4165 73.2881 21.397 c72.8135 21.5884 L73.458 22.5156 73.9463 23.5776 74.251 24.8662 c72.8418 24.8662 L72.8418 25.3267 L73.6846 25.3267 L73.9043 25.3267 74.1309 25.3335 74.3359 25.3335 c74.4209 25.7085 74.4844 26.1123 74.5342 26.5298 C75.2773 26.4312 lf77.1611 23.4146 m77.168 22.8413 77.2104 22.4517 77.2529 21.9634 c77.7061 21.7866 78.2939 21.4819 78.7607 21.1421 c78.5059 20.689 L78.1167 20.9863 77.6353 21.2622 77.2529 21.4321 c77.2529 20.7241 76.9697 20.1724 75.9287 20.1724 c75.1431 20.1724 74.541 20.5259 74.5483 21.1919 c74.5483 21.8999 75.292 22.2397 75.9434 22.2397 c76.1982 22.2397 76.46 22.1899 76.7432 22.1118 c76.7148 22.5649 76.6797 23.0254 76.6797 23.3579 C77.1611 23.4146 lf1 D76.7715 21.645 m76.4814 21.7583 76.1836 21.8076 75.9287 21.8076 c75.5039 21.8076 75.0015 21.6377 74.9941 21.1987 c74.9941 20.7954 75.3906 20.604 75.9434 20.604 c76.4531 20.604 76.7783 20.8521 76.7783 21.3188 c76.7783 21.4321 76.7783 21.5386 76.7715 21.645 cf0 D78.7114 24.144 m77.9111 24.1372 76.9414 24.0093 76.2051 23.7974 c76.127 24.2432 L76.9346 24.4771 77.9111 24.6255 78.6831 24.6255 C78.7114 24.144 lf*U*u85.1533 24.1226 m85.1396 24.1157 85.1182 24.1157 85.0967 24.1157 c85.0474 24.1157 84.9907 24.1299 84.9482 24.1582 c82.8457 23.5425 80.9409 22.6147 80.9482 21.666 c80.9482 20.9863 81.6982 20.7524 82.8457 20.7524 c83.9854 20.7524 84.8564 20.8374 85.3516 20.9155 c85.3945 20.3989 L84.7432 20.314 83.688 20.271 82.8594 20.271 c81.458 20.271 80.4385 20.5972 80.4312 21.6377 c80.4238 22.395 81.1816 23.061 82.293 23.6343 c82.0527 24.0659 81.9678 24.8872 81.9678 26.4878 c82.7461 26.4238 L82.7393 26.3315 82.6685 26.2749 82.5269 26.2539 c82.5195 25.0151 82.5625 24.2432 82.7607 23.8608 c83.4258 24.1724 84.1904 24.4556 84.9697 24.7104 C85.1533 24.1226 lf84.2471 26.3315 m84.6152 26.0132 84.9551 25.6099 85.1465 25.2769 c84.8418 25.0718 L84.6582 25.397 84.332 25.8149 83.9712 26.1265 C84.2471 26.3315 lf85.1963 26.7354 m85.5645 26.4097 85.8828 26.0415 86.0811 25.6875 c85.791 25.4893 L85.5928 25.8291 85.2739 26.2183 84.9268 26.5229 C85.1963 26.7354 lf*U*u87.4111 20.4556 m87.1919 20.9653 87.1069 22.02 87.1069 22.9478 c87.1069 23.8892 87.2559 25.0718 87.4893 26.2539 c88.1758 26.1196 L88.1621 26.0483 88.0908 25.999 87.9922 25.9917 c87.7373 25.022 87.5811 23.7617 87.5811 22.9404 c87.5811 22.4023 87.5884 21.8643 87.645 21.6021 c87.8008 22.0269 88.084 22.7065 88.2324 23.0396 c88.5513 22.7422 L88.3174 22.2607 87.8223 21.1846 87.8223 20.8521 c87.8223 20.7524 87.8433 20.6465 87.8926 20.5122 C87.4111 20.4556 lf89.21 24.6255 m89.8047 24.6187 90.3994 24.6113 90.9941 24.6538 c90.9658 25.2627 90.9443 25.7866 90.9302 26.3105 c91.6455 26.2896 L91.6382 26.2183 91.5742 26.1616 91.4609 26.1406 c91.4683 25.6875 91.4824 25.2271 91.4966 24.689 c92.0557 24.7456 92.5088 24.8452 92.8843 24.9722 c92.9482 24.4771 L92.6084 24.3706 92.1196 24.2715 91.5176 24.2222 c91.5459 23.436 91.5815 22.6079 91.6025 22.1548 c92.1406 21.9351 92.6787 21.5884 93.0469 21.2554 c92.771 20.8022 L92.4805 21.0923 92.063 21.4038 91.624 21.6094 c91.6172 21.0073 91.5039 20.335 90.4414 20.335 c89.6133 20.335 89.061 20.7314 89.061 21.3545 c89.061 22.0767 89.79 22.395 90.4414 22.395 c90.6611 22.395 90.8945 22.3667 91.1143 22.3032 c91.0928 22.7495 91.0508 23.4927 91.0151 24.1865 c90.7959 24.1724 90.498 24.1655 90.293 24.1655 c89.2168 24.1655 L89.21 24.6255 lf1 D91.1494 21.8433 m90.9229 21.9136 90.6826 21.9702 90.4487 21.9702 c90.0166 21.9702 89.5 21.8149 89.5 21.3687 c89.5 20.9722 89.9248 20.7739 90.4414 20.7739 c90.9658 20.7739 91.1567 21.0288 91.1567 21.5952 C91.1494 21.8433 lf*U*u0 D99.4395 20.7881 m98.8164 20.6748 97.9951 20.6255 97.2871 20.6255 c96.6924 20.6255 96.1758 20.6606 95.8994 20.7173 c95.043 20.9087 94.6748 21.4468 94.6748 22.0698 c94.6748 22.6147 94.9795 23.1597 95.397 23.5845 c95.8076 23.3726 L95.4111 22.9614 95.1846 22.5083 95.1846 22.1118 c95.1846 21.7017 95.4609 21.3262 96.0693 21.1919 c96.3174 21.1353 96.7354 21.1069 97.2236 21.1069 c97.9102 21.1069 98.7314 21.1636 99.4043 21.2979 C99.4395 20.7881 lf96.2607 24.3638 m96.6289 24.647 97.1318 24.9937 97.5137 25.1851 c97.5137 25.1919 L96.9756 25.1284 95.7441 25.1001 94.958 25.1069 c94.958 25.2417 94.958 25.4751 94.9512 25.6025 c95.1064 25.5952 97.8252 25.5532 98.9863 25.8291 c99.043 25.3052 L98.2007 25.2061 97.1172 24.4697 96.6641 24.1089 C96.2607 24.3638 lf*U*u104.5791 25.3477 m104.5508 25.2837 104.4941 25.2344 104.4023 25.2344 c104.1475 23.0327 103.4111 21.1138 102.2354 21.1138 c101.6406 21.1138 101.1025 21.7085 101.1025 22.8271 c101.1025 24.5264 102.4268 25.9497 104.2891 25.9497 c106.335 25.9497 107.2197 24.6538 107.2197 23.2729 c107.2197 21.5884 106.2432 20.7739 104.5293 20.3774 c104.4658 20.4907 104.3457 20.6821 104.2324 20.8091 c105.8604 21.1206 106.6963 21.9136 106.6963 23.252 c106.6963 24.4204 105.9453 25.4819 104.2891 25.4819 c104.2178 25.4819 104.1401 25.4751 104.0762 25.4683 C104.5791 25.3477 lf1 D103.8994 25.4399 m102.4692 25.2627 101.584 24.0806 101.584 22.8413 c101.584 22.0835 101.9102 21.6094 102.25 21.6094 c103.1064 21.6094 103.7227 23.4995 103.8994 25.4399 cf*U*u0 D109.959 24.3491 m110.2852 23.896 110.625 23.2803 110.7451 22.8838 c110.3628 22.6997 L110.3271 22.8271 110.2705 22.9688 110.2002 23.1245 c109.9873 23.1104 109.7754 23.103 109.5698 23.0894 c109.5698 20.0591 L109.145 20.0591 L109.145 23.0679 L108.7485 23.0537 108.3945 23.0396 108.1113 23.0254 c108.1045 22.9761 108.0615 22.9478 108.0122 22.9331 c107.8848 23.4644 L108.3804 23.4644 L108.5361 23.6558 108.6992 23.875 108.8691 24.1157 c108.6494 24.4414 108.2813 24.8589 107.9556 25.1636 c108.2031 25.4683 L108.2744 25.4043 108.3521 25.3335 108.4297 25.2554 c108.6709 25.6665 108.9468 26.2329 109.1025 26.6362 c109.6055 26.4238 L109.584 26.3813 109.5342 26.3599 109.4565 26.3599 c109.2725 25.9634 108.9609 25.3833 108.6919 24.9868 c108.8545 24.8169 109.0034 24.6396 109.1167 24.4839 c109.4209 24.9438 109.7041 25.4253 109.9097 25.8291 c110.4053 25.5952 L110.3838 25.5601 110.3271 25.5317 110.2495 25.5317 c109.8887 24.9302 109.3223 24.0874 108.8262 23.4712 c110.0229 23.4927 L109.8955 23.7334 109.7539 23.981 109.6055 24.1938 C109.959 24.3491 lf108.8691 22.4233 m108.8477 22.3813 108.8052 22.353 108.7275 22.353 c108.6279 21.751 108.4653 21.0713 108.2529 20.6538 c108.1538 20.7173 107.998 20.7881 107.8989 20.8374 c108.1045 21.2339 108.2529 21.9136 108.3447 22.5581 C108.8691 22.4233 lf110.1929 22.5649 m110.3984 22.1475 110.5967 21.6094 110.667 21.2485 c110.582 21.2202 110.4971 21.1846 110.2705 21.1138 c110.2139 21.4751 110.0229 22.0269 109.8247 22.4517 C110.1929 22.5649 lf111.8496 22.7349 m112.1187 22.6147 L112.1113 22.5864 112.0903 22.5649 112.0693 22.5513 c111.8145 21.4395 111.269 20.6958 110.54 20.2925 c110.4761 20.3916 110.3271 20.5615 110.2354 20.6255 c110.8516 20.937 111.3257 21.4961 111.5664 22.3032 c110.54 22.3032 L110.54 22.7139 L111.7715 22.7139 L111.8496 22.7349 lf112.7275 23.3862 m112.7275 23.0679 112.9893 22.459 113.1455 22.1548 c113.4854 22.4233 113.8672 22.7778 114.1011 23.0464 c114.4482 22.7847 114.5049 22.7495 114.5542 22.7065 c114.5332 22.6714 114.4692 22.6572 114.3984 22.6714 c114.1294 22.4307 113.6973 22.0767 113.3438 21.8286 c113.6479 21.3687 114.0728 20.9653 114.6533 20.7104 c114.5684 20.6182 114.4268 20.4341 114.3633 20.314 c113.5347 20.7456 113.0322 21.4678 112.7275 22.1758 c112.7275 20.5898 L112.7275 20.1084 112.5293 20.0659 111.5947 20.0659 c111.5806 20.1934 111.5166 20.3633 111.46 20.4907 c111.7998 20.4839 112.0903 20.4839 112.1753 20.4839 c112.2676 20.4907 112.2886 20.5122 112.2886 20.5898 c112.2886 23.3862 L110.8726 23.3862 L110.8726 25.8931 L112.0054 25.8931 L112.126 26.1333 112.2461 26.4312 112.3169 26.6431 c112.9116 26.4946 L112.8975 26.4521 112.8477 26.4238 112.77 26.4238 c112.6992 26.2749 112.6001 26.0767 112.4941 25.8931 c114.2427 25.8931 L114.2427 23.3862 L112.7275 23.3862 lf1 D111.3115 25.4966 m111.3115 24.8306 L113.7822 24.8306 L113.7822 25.4966 L111.3115 25.4966 lf111.3115 24.4556 m111.3115 23.7827 L113.7822 23.7827 L113.7822 24.4556 L111.3115 24.4556 lf*U*u0 D120.7129 20.6958 m120.1045 21.1772 119.3325 21.6377 118.5889 21.8784 c118.6035 21.6021 118.5537 21.2412 118.4971 21.0571 c118.4404 20.4692 117.8955 20.2427 117.2441 20.2427 c116.3306 20.2427 115.6084 20.689 115.6016 21.4038 c115.5869 22.1191 116.3379 22.5581 117.2295 22.5649 c117.4775 22.5649 117.7959 22.5513 118.0581 22.5015 c118.0581 22.6929 118.0225 22.8555 118.0156 23.0181 c117.9521 23.9458 117.8955 25.4326 117.8882 26.4521 c118.6245 26.4097 L118.6245 26.3389 118.5605 26.2749 118.4404 26.2612 c118.4336 26.0698 118.4404 25.1353 118.4404 24.9229 c118.9004 24.9229 119.9346 25.0005 120.791 25.1494 c120.8408 24.647 L120.0332 24.519 118.9854 24.4487 118.4473 24.4414 c118.4473 24.0376 118.4619 23.875 118.5679 22.4097 c119.4814 22.1401 120.3447 21.6587 121.0391 21.1489 C120.7129 20.6958 lf1 D117.2158 22.1401 m116.5361 22.1265 116.0615 21.8433 116.0615 21.4395 c116.0615 20.9224 116.6211 20.6958 117.1875 20.6958 c117.6826 20.6958 118.0938 20.873 118.0938 21.3755 c118.0938 21.5386 118.0938 21.8286 118.0791 22.0342 c117.7959 22.1191 117.4844 22.1401 117.2158 22.1401 cf*U*u0 D123.6294 22.459 m123.4951 22.8413 123.4312 23.3936 123.4238 23.79 c123.4238 24.4556 123.4951 25.2271 123.665 26.1265 c124.373 26.0063 L124.3447 25.9141 124.2598 25.8931 124.1675 25.8857 c124.0259 25.2983 123.9268 24.3989 123.9268 23.8257 c123.9268 23.6694 123.9336 23.5425 123.9482 23.4429 c124.0898 23.79 124.3516 24.2715 124.5 24.5405 c124.564 24.4487 124.7056 24.2998 124.7764 24.229 c124.2524 23.2876 124.0967 23.0181 124.0967 22.7212 c124.0967 22.6646 124.1035 22.6079 124.1182 22.5439 C123.6294 22.459 lf127.4243 26.3105 m127.417 26.2256 127.3604 26.1899 127.2402 26.1548 c127.29 25.5386 127.3604 24.5122 127.3604 23.6978 c127.3535 22.3315 126.8579 21.0996 124.7266 20.2144 c124.6489 20.3276 124.479 20.519 124.373 20.6255 c126.3057 21.3618 126.8223 22.5298 126.8223 23.6909 c126.8223 24.562 126.7373 25.5884 126.6597 26.3462 C127.4243 26.3105 lf*U*u135.3955 25.4043 m135.3955 20.7031 L135.3955 20.3706 135.3179 20.2144 135.0771 20.1294 c134.8364 20.0518 134.3975 20.0444 133.7529 20.0444 c133.7319 20.186 133.6543 20.3989 133.583 20.5332 c133.8452 20.5259 134.1001 20.519 134.3057 20.519 c134.8931 20.519 134.9214 20.519 134.9214 20.7031 c134.9214 24.937 L132.7051 24.937 L132.6914 24.647 132.6558 24.3423 132.585 24.0308 c133.3213 23.3862 134.2061 22.5298 134.6523 21.9849 c134.2627 21.6802 L133.8735 22.1685 133.1299 22.9404 132.4434 23.5708 c132.1816 22.8555 131.6572 22.1475 130.6377 21.5527 c130.5674 21.6587 130.4111 21.8286 130.2979 21.9136 c131.9121 22.7847 132.1816 23.981 132.2236 24.937 c130.1211 24.937 L130.1211 20.0444 L129.6465 20.0444 L129.6465 25.4043 L132.231 25.4043 L132.231 26.6431 L132.854 26.6011 L132.8467 26.5513 132.8115 26.5161 132.7124 26.5015 c132.7124 25.4043 L135.3955 25.4043 lf*U*u137.1367 24.0732 m136.9033 23.6558 136.6553 23.2661 136.3936 22.9404 c136.3438 23.0537 136.2305 23.2944 136.1597 23.4009 c136.7686 24.1372 137.3564 25.3687 137.7173 26.5938 c138.2764 26.4165 L138.2554 26.3672 138.2061 26.3389 138.1138 26.3389 c137.958 25.8647 137.7739 25.3901 137.5684 24.937 c137.7314 24.8872 L137.7173 24.8379 137.6816 24.8096 137.5967 24.7954 c137.5967 20.0518 L137.1367 20.0518 L137.1367 24.0732 lf139.2607 21.4111 m139.2461 21.3828 139.1973 21.3618 139.1328 21.3545 c138.9629 20.958 138.5879 20.4272 138.248 20.1011 c138.1704 20.186 138.0078 20.314 137.9014 20.3843 c138.248 20.6958 138.6162 21.2202 138.7935 21.6167 C139.2607 21.4111 lf140.4355 26.2114 m140.4355 21.7866 L138.3687 21.7866 L138.3687 26.2114 L140.4355 26.2114 lf1 D140.0039 24.8662 m140.0039 25.8081 L138.7861 25.8081 L138.7861 24.8662 L140.0039 24.8662 lf140.0039 23.5352 m140.0039 24.4839 L138.7861 24.4839 L138.7861 23.5352 L140.0039 23.5352 lf140.0039 22.1899 m140.0039 23.1528 L138.7861 23.1528 L138.7861 22.1899 L140.0039 22.1899 lf0 D140.2656 20.25 m140.1523 20.5615 139.877 21.064 139.6357 21.4395 c139.9902 21.6235 L140.2383 21.2554 140.5215 20.7739 140.6416 20.4766 C140.2656 20.25 lf141.6045 25.8716 m141.5977 25.8218 141.5547 25.7935 141.4629 25.7798 c141.4629 21.6802 L141.0381 21.6802 L141.0381 25.9067 L141.6045 25.8716 lf142.248 26.5444 m142.8223 26.5088 L142.8145 26.4595 142.7793 26.4238 142.6875 26.4165 c142.6875 20.6465 L142.6875 20.0801 142.3975 20.0518 141.4482 20.0518 c141.4277 20.1724 141.3633 20.3774 141.293 20.5049 c141.4844 20.4976 141.6611 20.4976 141.8027 20.4976 c142.2344 20.4976 142.248 20.4976 142.248 20.6392 C142.248 26.5444 lf*U*u143.4023 23.2593 m143.6992 23.5425 144.4287 24.314 144.8037 24.7173 c145.3486 25.3193 145.6182 25.4536 145.9717 25.4536 c146.3965 25.4536 146.7012 25.1851 147.3311 24.4341 c147.834 23.8257 148.9951 22.5298 150 21.6094 c149.625 21.1704 L148.6553 22.0483 147.501 23.3726 147.0762 23.9033 c146.4746 24.6396 146.2549 24.9229 145.9648 24.9229 c145.6816 24.9229 145.4619 24.689 145.0303 24.2007 c144.7891 23.9243 144.2158 23.2944 143.9121 22.9546 c143.9189 22.8628 143.8906 22.7915 143.834 22.7563 C143.4023 23.2593 lf*UULB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(\203f\203U\203C\203\223) Ln0 A1 Ap0 R0 1 0 0 K0 J 0 j 0.340157 w 10 M []0 d0 XR266.4561 -160.1572 m8.50391 -160.1572 L8.50391 -4.25195 L266.4561 -4.25195 L266.4561 -160.1572 L(s) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF